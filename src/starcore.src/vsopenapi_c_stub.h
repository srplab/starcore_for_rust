/*
vsopenapi_c stub header file
create by srplab            
create date: 2018-3-23
*/

#ifndef _VSOPENAPI_C_STUB
#define _VSOPENAPI_C_STUB

#include "vsopenapi_c.h"

extern struct StructOfVSStarCoreInterfaceTable *g_star_CoreFunctionTbl;

extern void Star_SRPComm_Release(void *c_this);
extern VS_HANDLE Star_SRPComm_CreateMsgQueue(void *c_this,VS_INT32 ControlMsgSize,VS_INT32 DataMsgSize);
extern void Star_SRPComm_DeleteMsgQueue(void *c_this,VS_HANDLE MsgHandle);
extern VS_INT8 *Star_SRPComm_GetControlMsgBuf(void *c_this,VS_HANDLE MsgHandle);
extern VS_INT8 *Star_SRPComm_GetDataMsgBuf(void *c_this,VS_HANDLE MsgHandle);
extern void Star_SRPComm_FreeMsgBuf(void *c_this,VS_HANDLE MsgHandle,VS_INT8 *MsgBuf);
extern VS_INT32 Star_SRPComm_AddMsgToQueue(void *c_this,VS_HANDLE MsgHandle,VS_INT8 *MsgBuf);
extern VS_INT8 *Star_SRPComm_GetMsgFromQueue(void *c_this,VS_HANDLE MsgHandle,VS_INT32 WaitMark);
extern VS_HANDLE Star_SRPComm_GetKernelMsgQueue(void *c_this);
extern VS_UINT16 Star_SRPComm_AllocKernelMsgClass(void *c_this);
extern void Star_SRPComm_FreeKernelMsgClass(void *c_this,VS_UINT16 MsgClass);
extern VS_BOOL Star_SRPComm_RegKernelMsgProc(void *c_this,VS_UINT16 MsgClass,VS_KernelMsgProc KernelMsgProc,VS_UWORD Para);
extern void Star_SRPComm_UnRegKernelMsgProc(void *c_this,VS_UINT16 MsgClass,VS_KernelMsgProc KernelMsgProc,VS_UWORD Para);
extern VS_BOOL Star_SRPComm_RegWebServerMsgProc(void *c_this,VS_WebServerMsgProc WebServerMsgProc,VS_UWORD Para,VS_BOOL RunInKernel,VS_ULONG BufSize);
extern VS_BOOL Star_SRPComm_UnRegWebServerMsgProc(void *c_this,VS_WebServerMsgProc WebServerMsgProc,VS_UWORD Para);
extern void Star_SRPComm_WebServerRelease(void *c_this,VS_ULONG ConnectionID);
extern VS_ULONG Star_SRPComm_TCPSetupServer(void *c_this,VS_HANDLE MsgHandle,VS_INT32 BufferPkgNum,const VS_INT8 *LocalServerName,VS_UINT16 PortNumber,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass,SOCKADDR_IN *SocketAddr);
extern VS_ULONG Star_SRPComm_TCPSetupClient(void *c_this,VS_HANDLE MsgHandle,VS_INT32 BufferPkgNum,const VS_INT8 *ServerName,VS_UINT16 PortNumber,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass);
extern VS_INT32 Star_SRPComm_TCPSend(void *c_this,VS_ULONG ConnectionID,VS_INT32 Length,const VS_INT8 *FrameBuf,VS_BOOL MoreData);
extern VS_INT32 Star_SRPComm_TCPRecv(void *c_this,VS_ULONG ConnectionID,VS_INT32 Length,VS_INT8 *FrameBuf);
extern VS_INT32 Star_SRPComm_TCPRecvLine(void *c_this,VS_ULONG SocketIDOfClient,VS_INT32 Length,VS_CHAR *FrameBuf,VS_INT32 *ModeDataSize);
extern VS_INT32 Star_SRPComm_TCPPreview(void *c_this,VS_ULONG SocketIDOfClient,VS_INT32 Length,VS_INT8 *FrameBuf);
extern VS_INT32 Star_SRPComm_TCPDisacrd(void *c_this,VS_ULONG SocketIDOfClient,VS_INT32 Length);
extern void Star_SRPComm_TCPRelease(void *c_this,VS_ULONG ConnectionID);
extern VS_ULONG Star_SRPComm_UDPSetupServer(void *c_this,VS_HANDLE MsgHandle,VS_INT32 BufferPkgNum,const VS_INT8 *LocalServerName,VS_UINT16 PortNumber,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass,SOCKADDR_IN *SocketAddr);
extern VS_ULONG Star_SRPComm_UDPSetupClient(void *c_this,VS_HANDLE MsgHandle,VS_INT32 BufferPkgNum,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass);
extern VS_INT32 Star_SRPComm_UDPSend(void *c_this,VS_ULONG ConnectionID,VS_INT32 Length,const VS_INT8 *FrameBuf,VSSOCKADDR_IN *SockAddr);
extern VS_BOOL Star_SRPComm_UDPRecv(void *c_this,VS_ULONG ConnectionID,VS_INT32 *Length,VS_INT8 *FrameBuf,VSSOCKADDR_IN *SockAddr);
extern void Star_SRPComm_UDPRelease(void *c_this,VS_ULONG ConnectionID);
extern VS_BOOL Star_SRPComm_UDPSetSockAddr(void *c_this,const VS_CHAR *Name,VS_UINT16 Port,VSSOCKADDR_IN *SockAddr);
extern VS_ULONG Star_SRPComm_HttpDownLoad( void *c_this,VS_HANDLE MsgHandle,const VS_CHAR *Url,const VS_CHAR *FileName,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass );
extern VS_ULONG Star_SRPComm_HttpUpLoad( void *c_this,VS_HANDLE MsgHandle,const VS_CHAR *Url,const VS_CHAR *FileName,VS_UINT64 FileSize,const VS_CHAR *ContentType,VS_BOOL MultiPartFlag,const VS_CHAR *SaveFileName,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass );
extern VS_ULONG Star_SRPComm_HttpDownLoadEx( void *c_this,VS_HANDLE MsgHandle,const VS_CHAR *Url,const VS_CHAR *FileName,const VS_CHAR *RequestHeader,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass );
extern VS_ULONG Star_SRPComm_HttpUpLoadEx( void *c_this,VS_HANDLE MsgHandle,const VS_CHAR *Url,const VS_CHAR *FileName,VS_UINT64 FileSize,const VS_CHAR *RequestHeader,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass );
extern VS_INT32 Star_SRPComm_HttpSend(void *c_this,VS_ULONG ConnectionID,VS_INT32 Length,const VS_INT8 *FrameBuf,VS_BOOL MoreData);
extern VS_INT32 Star_SRPComm_HttpRecv(void *c_this,VS_ULONG ConnectionID,VS_INT32 Length,VS_INT8 *FrameBuf);
extern void Star_SRPComm_HttpRelease( void *c_this,VS_ULONG ConnectionID );
extern VS_ULONG Star_SRPComm_HttpServer( void *c_this,VS_HANDLE MsgHandle,const VS_INT8 *LocalServerName,VS_UINT16 PortNumber,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass,SOCKADDR_IN *SocketAddr, VS_ULONG MaxPostSize );
extern void Star_SRPComm_FormatRspHeader(void *c_this,const VS_CHAR *RspInfo,const VS_CHAR *ServerInfo,const VS_CHAR *Connection,const VS_CHAR *ContentType,VS_UINT64 ContentLength,VS_CHAR *Buf);
extern VS_BOOL Star_SRPComm_ParsePara(void *c_this,const VS_CHAR *Info,const VS_CHAR *ParaName,VS_CHAR *ParaBuf,VS_INT32 ParaBufSize);
extern VS_INT32 Star_SRPComm_GetResponseCode(void *c_this,VS_INT8 *Response,VS_CHAR *RspInfo,VS_INT32 RspInfoSize);
extern VS_BOOL Star_SRPComm_GetResponseStr(void *c_this,VS_INT8 *Response,const VS_CHAR *Title,VS_CHAR *Buf,VS_INT32 BufSize);
extern VS_INT8 *Star_SRPComm_GetResponseBody(void *c_this,VS_INT8 *Response);
extern VS_ULONG Star_SRPComm_HttpLocalRequest(void *c_this,VS_HANDLE MsgHandle,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass,VS_UINT8 RequestType,VS_UINT8 BoundaryNumber,VS_UINT64 FileSize,const VS_CHAR  *FileName,const VS_CHAR  *ContentType,const VS_CHAR  *Cookie,VS_ULONG  *BoundaryInfo,const VS_CHAR  *RequestHeader,const VS_CHAR  *RequestBody);
extern VS_ULONG Star_SRPComm_HttpLocalRequestEx(void *c_this,VS_HANDLE MsgHandle,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass,const VS_CHAR *HtmlRequestPlain);
extern VS_ULONG Star_SRPComm_SetupTimer(void *c_this,VS_INT32 Interval,VS_INT32 NumberOfValid,VS_HANDLE MsgHandle,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass);
extern void Star_SRPComm_KillTimer(void *c_this,VS_ULONG TimerID);
extern void *Star_SRPComm_Dup(void *c_this);
extern void Star_SRPComm_HookManagerMsgProc(void *c_this,VS_ManagerMsgProc ManagerMsgProc);
extern VS_BOOL Star_SRPComm_UnHookManagerMsgProc(void *c_this);
extern VS_ULONG Star_SRPComm_SetupManagerTimer(void *c_this,VS_INT32 Interval,VS_INT32 NumberOfValid,VS_ULONG ConnectionGroup,VS_UINT16 MsgClass);
extern void Star_SRPComm_FormatRspHeaderEx(void *c_this,const VS_CHAR *RspInfo,const VS_CHAR *ServerInfo,const VS_CHAR *Connection,const VS_CHAR *ContentType,VS_UINT64 ContentLength,const VS_CHAR *ExtendInfo,VS_CHAR *Buf);
extern VS_BOOL Star_SRPComm_Http_GetHeaderItem(void *c_this,const VS_INT8 *Header,VS_INT32 ItemIndex,const VS_CHAR *ItemName,VS_CHAR *RetBuf,VS_INT32 RetBufSize);
extern VS_BOOL Star_SRPComm_Http_GetHeaderSubItem(void *c_this,const VS_CHAR *Item,VS_INT32 SubItemIndex,const VS_CHAR *SubItemName,VS_CHAR *RetBuf,VS_INT32 RetBufSize );
extern VS_BOOL Star_SRPComm_Http_GetNVValue(void *c_this,const VS_CHAR *Buf,const VS_CHAR *Name,VS_CHAR *RetBuf,VS_INT32 RetBufSize);
extern void Star_SRPComm_Http_TimeToHttpTime(void *c_this,VS_TIME_T *Time,VS_CHAR *HttpTimeBuf);
extern void Star_SRPComm_Http_HttpTimeToTime(void *c_this,VS_CHAR *HttpTimeBuf,VS_TIME_T *Time);
extern void Star_SRPComm_Http_SetCookie(void *c_this,const VS_CHAR *Domain,const VS_CHAR *Path,const VS_CHAR *Cookie,VS_BOOL Secure);
extern void Star_SRPComm_Http_ClearCookie(void *c_this,const VS_CHAR *Domain,const VS_CHAR *Path,const VS_CHAR *Cookie);
extern VS_CHAR *Star_SRPComm_Http_GetMediaType(void *c_this,const VS_CHAR *FileName);
extern void Star_SRPComm_Http_SetMaxPostSize(void *c_this,VS_ULONG ConnectionID,VS_ULONG MaxPostSize);
extern VS_INT8 *Star_SRPComm_Http_GetMultiPart(void *c_this,VS_INT8 *RequestBody,VS_UINT8 Index,VS_UINT8 BoundaryNumber,VS_ULONG  *BoundaryInfo,VS_UINT64 *RetMultiPartBodySize,VS_CHAR *RetBuf,VS_INT32 RetBufSize);
extern void Star_SRPComm_LuaPushHttpOnRequest(void *c_this,VS_ULONG ServiceGroupIndex,struct StructOfSRPComm_HttpOnRequest *HttpOnRequest);
extern VS_BOOL Star_SRPComm_IsTCPConnect(void *c_this,VS_ULONG ConnectionID);
extern VS_BOOL Star_SRPComm_IsHttpConnect(void *c_this,VS_ULONG ConnectionID);
extern VS_BOOL Star_SRPComm_FileDownLoad( void *c_this,const VS_CHAR *Url,const VS_CHAR *LocalFileName,VS_BOOL WaitFlag,VS_WebDownInfoProc CallBackProc, VS_UWORD Para);
extern VS_BOOL Star_SRPComm_FileUpLoad( void *c_this,const VS_CHAR *Url,const VS_CHAR *LocalFileName,const VS_CHAR *RemoteFileName,void *RetBinBuf,VS_BOOL MultiPartFlag,const VS_CHAR *ContentType,VS_BOOL WaitFlag,VS_WebDownInfoProc CallBackProc, VS_UWORD Para );
extern VS_BOOL Star_SRPComm_BufDownLoad( void *c_this,const VS_CHAR *Url,void *BinBuf,VS_BOOL WaitFlag,VS_WebDownInfoProc CallBackProc, VS_UWORD Para );
extern VS_BOOL Star_SRPComm_BufUpLoad( void *c_this,const VS_CHAR *Url,void *BinBuf,const VS_CHAR *RemoteFileName,void *RetBinBuf,VS_BOOL MultiPartFlag,const VS_CHAR *ContentType,VS_BOOL WaitFlag,VS_WebDownInfoProc CallBackProc, VS_UWORD Para );
extern void Star_SRPComm_AddRef(void *c_this);
extern VS_INT32 Star_SRPComm_GetRef(void *c_this);
extern void Star_SRPComm_ReleaseOwner(void *c_this);
extern void Star_SRPSXML_Release(void *c_this);
extern VS_BOOL Star_SRPSXML_LoadFromFile(void *c_this,const VS_CHAR *FileName,VS_CHAR **ErrorInfo);
extern VS_BOOL Star_SRPSXML_LoadFromBuf(void *c_this,const VS_INT8 *Buf,VS_CHAR **ErrorInfo);
extern VS_BOOL Star_SRPSXML_SaveToFile(void *c_this,const VS_CHAR *FileName);
extern VS_BOOL Star_SRPSXML_SaveToBuf(void *c_this,void *BinBuf);
extern VS_CHAR *Star_SRPSXML_GetStandalone(void *c_this);
extern VS_CHAR *Star_SRPSXML_GetVersion(void *c_this);
extern VS_CHAR *Star_SRPSXML_GetEncoding(void *c_this);
extern void *Star_SRPSXML_FindElement(void *c_this,const VS_CHAR *Value);
extern void *Star_SRPSXML_FindElementEx(void *c_this,void *ParentElement,const VS_CHAR *Value);
extern void *Star_SRPSXML_FirstElement(void *c_this,void *ParentElement);
extern void *Star_SRPSXML_NextElement(void *c_this,void *Element);
extern void *Star_SRPSXML_ParentElement(void *c_this,void *Element);
extern VS_CHAR *Star_SRPSXML_GetElement(void *c_this,void *Element);
extern void Star_SRPSXML_GetElementEx(void *c_this,void *Element,VS_CHAR *Buf,VS_INT32 BufSize);
extern VS_BOOL Star_SRPSXML_GetNs(void *c_this,void *Element,VS_CHAR *nsName,VS_INT32 nsNameBufSize,VS_CHAR **nsValue);
extern VS_CHAR *Star_SRPSXML_GetNsValue(void *c_this,void *Element,const VS_CHAR *nsName);
extern void Star_SRPSXML_SetNs(void *c_this,void *Element,const VS_CHAR *nsName,const VS_CHAR *nsValue);
extern void *Star_SRPSXML_FindAttribute(void *c_this,void *Element,const VS_CHAR *Name);
extern void *Star_SRPSXML_FirstAttribute(void *c_this,void *Element);
extern void *Star_SRPSXML_NextAttribute(void *c_this,void *Attribute);
extern VS_CHAR *Star_SRPSXML_GetAttributeName(void *c_this,void *Attribute);
extern VS_CHAR *Star_SRPSXML_GetAttributeValue(void *c_this,void *Attribute);
extern VS_CHAR *Star_SRPSXML_GetSingleText(void *c_this,void *Element);
extern void *Star_SRPSXML_FirstText(void *c_this,void *Element);
extern void *Star_SRPSXML_NextText(void *c_this,void *Text);
extern VS_CHAR *Star_SRPSXML_GetText(void *c_this,void *Text);
extern void Star_SRPSXML_SetDeclaration(void *c_this,const VS_CHAR *Version,const VS_CHAR *Encoding,const VS_CHAR *Standalone);
extern void Star_SRPSXML_RemoveDeclaration(void *c_this);
extern void *Star_SRPSXML_InsertElementBefore(void *c_this,void *ParentElement,void *Element,const VS_CHAR *Value);
extern void *Star_SRPSXML_InsertElementAfter(void *c_this,void *ParentElement,void *Element,const VS_CHAR *Value);
extern void Star_SRPSXML_RemoveElement(void *c_this,void *Element);
extern void Star_SRPSXML_SetElement(void *c_this,void *Element,const VS_CHAR *Value);
extern void *Star_SRPSXML_InsertTextBefore(void *c_this,void *ParentElement,void *Text,const VS_CHAR *Value,VS_BOOL CDataFlag);
extern void *Star_SRPSXML_InsertTextAfter(void *c_this,void *ParentElement,void *Text,const VS_CHAR *Value,VS_BOOL CDataFlag);
extern void Star_SRPSXML_RemoveText(void *c_this,void *Text);
extern void Star_SRPSXML_SetText(void *c_this,void *Text,const VS_CHAR *Value,VS_BOOL CDataFlag);
extern void *Star_SRPSXML_InsertCommentBefore(void *c_this,void *ParentElement,void *Comment,const VS_CHAR *Value);
extern void *Star_SRPSXML_InsertCommentAfter(void *c_this,void *ParentElement,void *Comment,const VS_CHAR *Value);
extern void Star_SRPSXML_RemoveComment(void *c_this,void *Comment);
extern void Star_SRPSXML_SetComment(void *c_this,void *Comment,const VS_CHAR *Value);
extern void Star_SRPSXML_SetAttribute(void *c_this,void *Element,const VS_CHAR *Name,const VS_CHAR *Value);
extern void Star_SRPSXML_RemoveAttribute(void *c_this,void *Element,const VS_CHAR *Name);
extern VS_INT32 Star_SRPSXML_GetRow(void *c_this,void *Node);
extern VS_INT32 Star_SRPSXML_GetCol(void *c_this,void *Node);
extern void *Star_SRPSXML_Dup(void *c_this);
extern VS_BOOL Star_SRPSXML_Copy(void *c_this,void *SrcSXML);
extern void *Star_SRPSXML_CopyElementBefore(void *c_this,void *ParentElement,void *Element,void *SrcElement);
extern void *Star_SRPSXML_CopyElementAfter(void *c_this,void *ParentElement,void *Element,void *SrcElement);
extern VS_BOOL Star_SRPSXML_CopyChild(void *c_this,void *DesElement,void *SrcElement);
extern VS_BOOL Star_SRPSXML_LoadFromAnsiBuf(void *c_this,const VS_INT8 *Buf,VS_CHAR **ErrorInfo);
extern VS_BOOL Star_SRPSXML_SaveToAnsiBuf(void *c_this,void *BinBuf);
extern void Star_SRPSXML_AddRef(void *c_this);
extern VS_INT32 Star_SRPSXML_GetRef(void *c_this);
extern void Star_SRPSXML_ReleaseOwner(void *c_this);
extern void Star_SRPControl_Release(void *c_this);
extern void Star_SRPControl_SRPLock( void *c_this);
extern void Star_SRPControl_SRPUnLock( void *c_this);
extern VS_UINT32 Star_SRPControl_GetOsType( void *c_this);
extern VS_BOOL Star_SRPControl_SRPDispatch(void *c_this,VS_BOOL WaitFlag);
extern VS_BOOL Star_SRPControl_SRPIdle(void *c_this);
extern void Star_SRPControl_SRPAppActive(void *c_this);
extern void Star_SRPControl_SRPAppDeactive(void *c_this);
/*extern void Star_SRPControl_ProcessError(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,...); */
/*extern void Star_SRPControl_ProcessErrorVar(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,va_list argList); */
/*extern void Star_SRPControl_ProcessLuaError(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,...); */
/*extern void Star_SRPControl_ProcessLuaErrorVar(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,va_list argList); */
extern VS_BOOL Star_SRPControl_IsAppActive(void *c_this);
extern void Star_SRPControl_CaptureLuaDisp(void *c_this,void *DispProc,VS_UWORD Para);
extern void Star_SRPControl_ReleaseLuaDisp(void *c_this,void *DispProc,VS_UWORD Para);
extern VS_BOOL Star_SRPControl_PreCompile(void *c_this,const VS_CHAR *ScriptInterface,const VS_INT8 *ScriptBuf,VS_INT32 ScriptBufSize, const VS_CHAR *Name, VS_CHAR **ErrorInfo);
extern VS_BOOL Star_SRPControl_OpenLuaEdit(void *c_this,const VS_CHAR *Module,VS_ULONG Config,VS_BOOL CloseEnable);
extern void Star_SRPControl_LuaEditDisp(void *c_this,const VS_CHAR *Info);
extern void Star_SRPControl_CloseLuaEdit(void *c_this);
extern void Star_SRPControl_ClearService(void *c_this );
extern VS_BOOL Star_SRPControl_DoBuffer( void *c_this,const VS_CHAR *ScriptInterface,const VS_INT8 *ScriptBuf,VS_INT32 ScriptBufSize,VS_BOOL IsUTF8,const VS_CHAR *ModuleName );
extern void Star_SRPControl_PostDoBuffer( void *c_this,const VS_CHAR *ScriptInterface,const VS_INT8 *ScriptBuf,VS_INT32 ScriptBufSize,VS_BOOL IsUTF8,const VS_CHAR *ModuleName );
extern VS_BOOL Star_SRPControl_DoFile( void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *FileName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8 );
extern VS_BOOL Star_SRPControl_PostDoFile( void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *FileName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8 );
extern void Star_SRPControl_LuaEditHelp(void *c_this,VS_INT32 Type,const VS_CHAR *HelpInfo);
extern void *Star_SRPControl_QueryBasicInterface( void *c_this,VS_ULONG ServiceGroupID );
extern void *Star_SRPControl_CreateBasicInterface( void *c_this,VS_ULONG ServiceGroupID, VS_UINT16 ProgramRunType );
extern void Star_SRPControl_DeleteBasicInterface( void *c_this,VS_ULONG ServiceGroupID );
extern VS_ULONG Star_SRPControl_QueryFirstServiceGroup( void *c_this);
extern VS_ULONG Star_SRPControl_QueryNextServiceGroup( void *c_this);
extern void *Star_SRPControl_GetLuaStack( void *c_this);
extern VS_UINT32 Star_SRPControl_LuaGetTableInt( void *c_this,void *L, VS_INT32 Index, const VS_CHAR *ValueName );
extern VS_UINT32 Star_SRPControl_LuaGetInt( void *c_this,void *L, VS_INT32 Index );
extern VS_INT32 Star_SRPControl_LuaUpValueIndex( void *c_this,void *L, VS_INT32 Index );
extern VS_ULONG Star_SRPControl_GetObjectServiceGroupID( void *c_this,void *Object );
extern void Star_SRPControl_GetUrl(void *c_this,VS_CHAR *Buf,VS_INT32 BufSize);
extern void Star_SRPControl_SetProgramType(void *c_this,VS_UINT16 Type);
extern VS_UINT16 Star_SRPControl_GetProgramType(void *c_this);
extern VS_BOOL Star_SRPControl_SRPBuild_QueryPublicService(void *c_this,void *QueryPublicServiceCallBackProc,VS_UWORD CallBackPara,VS_BOOL FillUpdateInfo,void *PrintProc,VS_UWORD Para);
extern VS_BOOL Star_SRPControl_SRPBuild_QueryPublicServiceEx(void *c_this,const VS_CHAR *Url,void *QueryPublicServiceCallBackProc,VS_UWORD CallBackPara,VS_BOOL FillUpdateInfo,void *PrintProc,VS_UWORD Para);
extern VS_BOOL Star_SRPControl_SRPBuild_Start(void *c_this,const VS_CHAR *Name,const VS_CHAR *Path,VS_BOOL SingleFlag,VS_BOOL ForceToDownLoadPublicService,void *PrintProc,VS_UWORD Para,struct VSPublicServiceDef *PublicServiceList,VS_BOOL ExeFileFlag,const VS_CHAR *ScriptInterface,VS_UINT32 SupportOsType);
extern void Star_SRPControl_SRPBuild_InsertServiceFile(void *c_this,const VS_CHAR *DiskFileName,const VS_CHAR *OutFileName,VS_BOOL StartFileFlag,VS_BOOL ToUTF8,VS_UINT32 SupportOsType);
extern void Star_SRPControl_SRPBuild_InsertDependFile(void *c_this,const VS_CHAR *Path,const VS_CHAR *DependName);
extern void Star_SRPControl_SRPBuild_InsertStaticDataFile(void *c_this,const VS_CHAR *DiskFileName,const VS_CHAR *OutFileName,VS_BOOL ToUTF8);
extern void Star_SRPControl_SRPBuild_InsertDynaDataFile(void *c_this,const VS_CHAR *DiskFileName,const VS_CHAR *OutFileName,VS_BOOL ToUTF8);
extern VS_BOOL Star_SRPControl_SRPBuild_Execute(void *c_this);
extern VS_BOOL Star_SRPControl_StringToUuid(void *c_this,const VS_INT8 *String,VS_UUID *Uuid);
extern VS_INT8 *Star_SRPControl_UuidToString(void *c_this,VS_UUID *Uuid);
extern VS_BOOL Star_SRPControl_MD5ToUuid(void *c_this,const VS_INT8 *String,VS_UUID *Uuid);
extern VS_INT8 *Star_SRPControl_UuidToMD5(void *c_this,VS_UUID *Uuid);
extern VS_INT8 *Star_SRPControl_GetMD5(void *c_this,VS_INT8 *Buf,VS_INT32 BufSize);
extern void Star_SRPControl_CreateUuid(void *c_this,VS_UUID *UuidPtr);
extern void *Star_SRPControl_GetSXMLInterface(void *c_this);
extern void *Star_SRPControl_GetCommInterface(void *c_this);
extern void *Star_SRPControl_GetCoreShellInterface(void *c_this);
extern VS_BOOL Star_SRPControl_RegScriptInterface(void *c_this,const VS_CHAR *ScriptInterface,struct StructOfVSScriptContext *ScriptContext,VS_UWORD Para,void *TermProc);
extern VS_BOOL Star_SRPControl_UnRegScriptInterface(void *c_this,const VS_CHAR *ScriptInterface,struct StructOfVSScriptContext *ScriptContext,VS_UWORD Para,void *TermProc);
extern VS_BOOL Star_SRPControl_ActiveScriptInterface(void *c_this,const VS_CHAR *ScriptInterface,VS_BOOL *OnLineScriptFlag,void *VirtualMachine);
extern VS_CHAR *Star_SRPControl_FirstScriptInterface(void *c_this,VS_QUERYRECORD *QueryRecord);
extern VS_CHAR *Star_SRPControl_NextScriptInterface(void *c_this,VS_QUERYRECORD *QueryRecord);
extern VS_BOOL Star_SRPControl_RegTempFile(void *c_this,const VS_CHAR *TempFileName,const VS_CHAR *OriFileName);
extern VS_CHAR *Star_SRPControl_GetRegTempFile(void *c_this,const VS_CHAR *OriFileName,VS_CHAR *Buf,VS_INT32 BufSize);
extern void Star_SRPControl_UnRegTempFile(void *c_this,const VS_CHAR *TempFileName);
extern void Star_SRPControl_GetConfigResult(void *c_this,VS_BOOL *DebugCfgResult,VS_BOOL *DirectClientCfgResult,VS_BOOL *TelnetCfgResult,VS_BOOL *WebServerCfgResult);
extern VS_CHAR *Star_SRPControl_GetConfigEnvTag( void *c_this);
extern void *Star_SRPControl_Dup(void *c_this);
extern void *Star_SRPControl_QueryInterface( void *c_this,VS_UUID *InterfaceID );
extern void Star_SRPControl_AddRef(void *c_this);
extern VS_INT32 Star_SRPControl_GetRef(void *c_this);
extern void Star_SRPControl_SetLogFile(void *c_this,const VS_CHAR *FileName,VS_BOOL LogAll);
extern void Star_SRPControl_GetSystemRegCode(void *c_this,VS_CHAR *Buf);
extern VS_BOOL Star_SRPControl_SetRegisterCode(void *c_this,const VS_CHAR *Buf,VS_BOOL Single);
extern VS_BOOL Star_SRPControl_IsRegistered(void *c_this);
extern VS_ULONG Star_SRPControl_GetHashValue(void *c_this,void *Key,VS_ULONG Length,VS_ULONG InitValue);
extern void Star_SRPControl_ScriptStarcoreRecord(void *c_this,const VS_CHAR *ScriptInterface,VS_HANDLE SharelibHandle);
extern void Star_SRPControl_ScriptStarcoreUnRecord(void *c_this,const VS_CHAR *ScriptInterface,VS_HANDLE SharelibHandle);
extern VS_BOOL Star_SRPControl_ScriptStarcoreIsRecord(void *c_this,const VS_CHAR *ScriptInterface);
extern VS_UWORD Star_SRPControl_FindWindow(void *c_this,const VS_CHAR *Caption);
extern VS_BOOL Star_SRPControl_WinMsgLoop(void *c_this,VS_BOOL *QuitFlag);
extern void Star_SRPControl_RegScriptObject(void *c_this,VS_UWORD ScriptObject,void *FreeScriptObjectProc,VS_UWORD Para);
extern void Star_SRPControl_UnRegScriptObject(void *c_this,VS_UWORD ScriptObject,void *FreeScriptObjectProc,VS_UWORD Para);
extern void Star_SRPControl_ClearScriptObject(void *c_this,void *FreeScriptObjectProc,VS_UWORD Para);
extern VS_BOOL Star_SRPControl_PreAuthorize(void *c_this,const VS_CHAR *ServiceName,VS_UUID *ServiceID,const VS_CHAR *Buf,VS_BOOL Single);
extern void Star_SRPControl_SetLocale(void *c_this,const VS_CHAR *Lang);
extern VS_CHAR *Star_SRPControl_GetLocale(void *c_this);
extern void Star_SRPControl_SetScriptInterfaceIndex(void *c_this,const VS_CHAR *ScriptInterfaceName);
extern VS_INT32 Star_SRPControl_GetScriptInterfaceIndex(void *c_this,const VS_CHAR *ScriptInterfaceName);
extern void Star_SRPControl_DetachCurrentThread(void *c_this);
extern VS_BOOL Star_SRPControl_DoFileEx( void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *FileName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8,const VS_CHAR *ModuleName );
extern VS_BOOL Star_SRPControl_PostDoFileEx( void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *FileName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8,const VS_CHAR *ModuleName );
extern void Star_SRPControl_ReleaseOwner(void *c_this);
extern VS_INT32 Star_SRPControl_GetLastError(void *c_this);
extern VS_CHAR *Star_SRPControl_GetLastErrorInfo(void *c_this,VS_UINT32 *LineIndex,VS_CHAR **SourceName);
extern VS_BOOL Star_SRPControl_SetScriptInterface(void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *Module,const VS_CHAR *Para);
extern VS_CHAR *Star_SRPControl_SetCoreOperationPath(void *c_this,const VS_CHAR *Path);
extern void *Star_SRPControl_GetCFunctionTable(void *c_this);
extern VS_UINT64 Star_SRPControl_LuaGetTableInt64(void *c_this, void *L, VS_INT32 Index, const VS_CHAR *ValueName);
extern VS_UINT64 Star_SRPControl_LuaGetInt64(void *c_this, void *L, VS_INT32 Index);
extern VS_UWORD Star_SRPControl_LuaGetTableUWord(void *c_this, void *L, VS_INT32 Index, const VS_CHAR *ValueName);
extern VS_UWORD Star_SRPControl_LuaGetUWord(void *c_this, void *L, VS_INT32 Index);
extern void *Star_SRPControl_RegisterProc(void *c_this,VS_CHAR *FunctionName,void *FunctionProc);
extern VS_UWORD Star_SRPControl_RunInMainThread(void *c_this,void* CallBack, VS_UWORD Para1, VS_UWORD Para2, VS_UWORD Para3, VS_UWORD Para4);
extern void Star_SRPControl_RegDispatchRequest(void *c_this,void *CallBack,VS_UWORD Para);
extern void Star_SRPControl_UnRegDispatchRequest(void *c_this,void *CallBack,VS_UWORD Para);
extern void Star_SRPBasic_Release(void *c_this);
extern VS_UINT32 Star_SRPBasic_GetOsType(void *c_this );
/*extern void Star_SRPBasic_Print(void *c_this,const VS_CHAR *format,...); */
/*extern void Star_SRPBasic_PrintVar(void *c_this,const VS_CHAR *format,va_list argList); */
/*extern void Star_SRPBasic_PrintLua(void *c_this,const VS_CHAR *format,...); */
/*extern void Star_SRPBasic_PrintLuaVar(void *c_this,const VS_CHAR *format,va_list argList); */
extern void Star_SRPBasic_SetPrintToLua(void *c_this,VS_BOOL PrintFlag);
/*extern void Star_SRPBasic_MessageBox(void *c_this,const VS_CHAR *Caption,const VS_CHAR *format,...); */
/*extern void Star_SRPBasic_MessageBoxVar(void *c_this,const VS_CHAR *Caption,const VS_CHAR *format,va_list argList); */
/*extern void Star_SRPBasic_ProcessError(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,...); */
/*extern void Star_SRPBasic_ProcessErrorVar(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,va_list argList); */
/*extern void Star_SRPBasic_ProcessLuaError(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,...); */
/*extern void Star_SRPBasic_ProcessLuaErrorVar(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,va_list argList); */
extern void Star_SRPBasic_CaptureLuaDisp(void *c_this,void *DispProc,VS_UWORD Para);
extern void Star_SRPBasic_ReleaseLuaDisp(void *c_this,void *DispProc,VS_UWORD Para);
extern void Star_SRPBasic_SetDefaultPath(void *c_this,const VS_CHAR *DefaultPath);
extern void Star_SRPBasic_GetDefaultPath(void *c_this,VS_CHAR *DefaultPath,VS_INT32 BufSize);
extern VS_BOOL Star_SRPBasic_DefaultPathIsSet(void *c_this);
extern VS_ULONG Star_SRPBasic_Connect(void *c_this,const VS_CHAR *ServerInterface,const VS_CHAR *ServerName,VS_UINT16 ServerPortNumber,VS_INT32 RetrySecond,void *ParaPkg,void *ClientConnectCallBack,VS_UWORD Para,const VS_CHAR *LoginName,const VS_CHAR *LoginPassword);
extern VS_ULONG Star_SRPBasic_ConnectEx(void *c_this,const VS_CHAR *ServiceName,VS_INT32 RetrySecond,void *ParaPkg,void *ClientConnectCallBack,VS_UWORD Para,const VS_CHAR *LoginName,const VS_CHAR *LoginPassword);
extern VS_ULONG Star_SRPBasic_SConnect(void *c_this,const VS_CHAR *ServerInterface,const VS_CHAR *ServerName,VS_UINT16 ServerPortNumber,void *ParaPkg,const VS_CHAR *LoginName,const VS_CHAR *LoginPassword);
extern VS_ULONG Star_SRPBasic_SConnectEx(void *c_this,const VS_CHAR *ServiceName,void *ParaPkg,const VS_CHAR *LoginName,const VS_CHAR *LoginPassword);
extern void *Star_SRPBasic_Connect2(void *c_this, const VS_CHAR *ServerInterface,const VS_CHAR *ServerName,VS_UINT16 ServerPortNumber,void *ParaPkg,const VS_CHAR *LoginName,const VS_CHAR *LoginPassword, const VS_CHAR *SysRootItemName );
extern void *Star_SRPBasic_ConnectEx2(void *c_this, const VS_CHAR *ServiceName,void *ParaPkg,const VS_CHAR *LoginName,const VS_CHAR *LoginPassword, const VS_CHAR *SysRootItemName );
extern void Star_SRPBasic_DisConnectEx(void *c_this,VS_ULONG ConnectionID);
extern void Star_SRPBasic_DisConnect(void *c_this);
extern VS_BOOL Star_SRPBasic_IsConnect(void *c_this);
extern void *Star_SRPBasic_GetLua(void *c_this );
extern VS_BOOL Star_SRPBasic_DoBuffer(void *c_this, const VS_CHAR *ScriptInterface,const VS_INT8 *ScriptBuf,VS_INT32 ScriptBufSize,VS_BOOL IsUTF8,const VS_CHAR *ModuleName );
extern VS_BOOL Star_SRPBasic_LuaToBool(void *c_this, VS_INT32 Index );
extern VS_CHAR *Star_SRPBasic_LuaToString(void *c_this, VS_INT32 Index );
extern VS_DOUBLE Star_SRPBasic_LuaToNumber(void *c_this, VS_INT32 Index );
extern VS_INT32 Star_SRPBasic_LuaToInt(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsBool(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsString(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsNumber(void *c_this, VS_INT32 Index );
extern void Star_SRPBasic_LuaGetGlobal(void *c_this, const VS_CHAR *Name );
extern void Star_SRPBasic_LuaGetSrvGroupTable(void *c_this, const VS_CHAR *Name );
extern void Star_SRPBasic_LuaPop(void *c_this, VS_INT32 Index );
extern void Star_SRPBasic_LuaPushBool(void *c_this, VS_BOOL Value );
extern void Star_SRPBasic_LuaPushString(void *c_this, const VS_CHAR *Value );
extern void Star_SRPBasic_LuaPushNumber(void *c_this, VS_DOUBLE Value );
extern void Star_SRPBasic_LuaPushInt(void *c_this, VS_INT32 Value );
extern void Star_SRPBasic_LuaPushNil(void *c_this );
extern void Star_SRPBasic_LuaSetGlobal(void *c_this, const VS_CHAR *Name );
extern void Star_SRPBasic_LuaSetSrvGroupTable(void *c_this, const VS_CHAR *Name );
extern VS_BOOL Star_SRPBasic_LuaIsNil(void *c_this, VS_INT32 Index );
extern void Star_SRPBasic_LuaNewTable(void *c_this );
extern VS_BOOL Star_SRPBasic_LuaIsTable(void *c_this, VS_INT32 Index );
extern VS_INT32 Star_SRPBasic_LuaGetTop(void *c_this);
extern VS_INT32 Star_SRPBasic_LuaObjLen(void *c_this,VS_INT32 TableIndex);
extern void Star_SRPBasic_LuaPushLString(void *c_this, const VS_CHAR *Value, VS_ULONG Len );
extern VS_BOOL Star_SRPBasic_LuaPushParaPkg(void *c_this, void *ParaPkg, VS_BOOL AutoRelease );
extern VS_BOOL Star_SRPBasic_LuaPushQueryRecord(void *c_this, VS_QUERYRECORD *QueryRecord, VS_BOOL AutoRelease );
extern void *Star_SRPBasic_LuaToParaPkg(void *c_this, VS_INT32 Index );
extern VS_QUERYRECORD *Star_SRPBasic_LuaToQueryRecord(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsParaPkg(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsQueryRecord(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaPushBinBuf(void *c_this, void *BinBuf, VS_BOOL AutoRelease );
extern void *Star_SRPBasic_LuaToBinBuf(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsBinBuf(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaPushSXml(void *c_this, void *SXml, VS_BOOL AutoRelease );
extern void *Star_SRPBasic_LuaToSXml(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsSXml(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaPushFunctionPara(void *c_this, void *FunctionPara, VS_BOOL AutoRelease );
extern void *Star_SRPBasic_LuaToFunctionPara(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsFunctionPara(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaPushCommInterface(void *c_this, void *CommInterface, VS_BOOL AutoRelease );
extern void *Star_SRPBasic_LuaToCommInterface(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsCommInterface(void *c_this, VS_INT32 Index );
extern void Star_SRPBasic_ClearLuaGlobal(void *c_this);
extern VS_BOOL Star_SRPBasic_PreCompile(void *c_this,const VS_CHAR *ScriptInterface,const VS_INT8 *ScriptBuf,VS_INT32 ScriptBufSize, const VS_CHAR *Name, VS_CHAR **ErrorInfo);
extern void Star_SRPBasic_GCCollect(void *c_this);
extern void Star_SRPBasic_PostDoBuffer(void *c_this, const VS_CHAR *ScriptInterface,const VS_INT8 *ScriptBuf,VS_INT32 ScriptBufSize,VS_BOOL IsUTF8,const VS_CHAR *ModuleName );
extern void Star_SRPBasic_PostDoBufferEx(void *c_this, const VS_CHAR *ScriptInterface,const VS_INT8 *ScriptBuf,VS_INT32 ScriptBufSize,VS_LuaInfoDispProc DispProc,VS_UWORD Para,VS_BOOL IsUTF8,const VS_CHAR *ModuleName );
extern VS_BOOL Star_SRPBasic_DoFile(void *c_this, const VS_CHAR *ScriptInterface,const VS_CHAR *FileName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8 );
extern VS_BOOL Star_SRPBasic_PostDoFile(void *c_this, const VS_CHAR *ScriptInterface,const VS_CHAR *FileName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8 );
extern void Star_SRPBasic_LuaRegHook(void *c_this, void *FuncAddr );
extern void Star_SRPBasic_LuaUnRegHook(void *c_this, void *FuncAddr );
extern VS_BOOL Star_SRPBasic_RegGCProc(void *c_this, VS_GCProc GCProc, VS_UWORD Para );
extern void Star_SRPBasic_UnRegGCProc(void *c_this, VS_GCProc GCProc, VS_UWORD Para );
extern VS_ULONG Star_SRPBasic_GetServiceGroupID(void *c_this );
extern VS_CHAR *Star_SRPBasic_QueryFirstService(void *c_this, VS_UUID *RetUuid );
extern VS_CHAR *Star_SRPBasic_QueryNextService(void *c_this, VS_UUID *RetUuid );
extern VS_CHAR *Star_SRPBasic_QueryActiveService(void *c_this, VS_UUID *RetUuid );
extern VS_CHAR *Star_SRPBasic_GetServiceName(void *c_this,VS_UUID *ServiceID);
extern VS_BOOL Star_SRPBasic_GetServiceID(void *c_this,const VS_CHAR *ServiceName,VS_UUID *ServiceID);
extern VS_BOOL Star_SRPBasic_IsValidUser(void *c_this,const VS_CHAR *UserName,const VS_CHAR *UserPass);
extern VS_BOOL Star_SRPBasic_ImportServiceEx(void *c_this, VS_UUID *ServiceID, VS_BOOL LoadRunModule );
extern VS_BOOL Star_SRPBasic_ImportServiceWithPath(void *c_this, const VS_CHAR *ServicePath,const VS_CHAR *ServiceName, VS_BOOL LoadRunModule );
extern VS_BOOL Star_SRPBasic_ImportService(void *c_this, const VS_CHAR *ServiceName, VS_BOOL LoadRunModule );
extern VS_CHAR *Star_SRPBasic_ImportDynaService(void *c_this, const VS_CHAR *Url );
extern VS_BOOL Star_SRPBasic_CreateService(void *c_this, const VS_CHAR *ServicePath,const VS_CHAR *ServiceName,VS_UUID *ServiceID,const VS_CHAR *RootPass,VS_INT32 FrameInterval,VS_INT32 NetPkgSize,VS_INT32 UploadPkgSize,VS_INT32 DownloadPkgSize,VS_INT32 DataUpPkgSize,VS_INT32 DataDownPkgSize);
extern VS_BOOL Star_SRPBasic_CreateServiceEx(void *c_this, const VS_CHAR *ServicePath,const VS_CHAR *ServiceName,VS_UUID *ServiceID,const VS_CHAR *RootPass,VS_INT32 FrameInterval,VS_INT32 NetPkgSize,VS_INT32 UploadPkgSize,VS_INT32 DownloadPkgSize,VS_INT32 DataUpPkgSize,VS_INT32 DataDownPkgSize);
extern VS_BOOL Star_SRPBasic_LoadServiceEx(void *c_this, VS_UUID *ServiceID,const VS_CHAR *UserName, const VS_CHAR *UserPass, VS_BOOL LoadRunModule );
extern VS_BOOL Star_SRPBasic_LoadServiceWithPath(void *c_this, const VS_CHAR *ServicePath,const VS_CHAR *ServiceName,const VS_CHAR *UserName, const VS_CHAR *UserPass, VS_BOOL LoadRunModule );
extern VS_BOOL Star_SRPBasic_LoadService(void *c_this, const VS_CHAR *ServiceName,const VS_CHAR *UserName, const VS_CHAR *UserPass, VS_BOOL LoadRunModule );
extern VS_BOOL Star_SRPBasic_ExportServiceHeader(void *c_this, const VS_CHAR *ServiceName,const VS_CHAR *Path );
extern VS_BOOL Star_SRPBasic_ExportServiceDefine(void *c_this, const VS_CHAR *ServiceName,const VS_CHAR *FileName );
extern void Star_SRPBasic_ClearService(void *c_this);
extern void Star_SRPBasic_ClearServiceEx(void *c_this);
extern VS_BOOL Star_SRPBasic_RegisterServer(void *c_this, const VS_CHAR *ServiceName );
extern void Star_SRPBasic_AllocCooperator(void *c_this, const VS_CHAR *ServiceName );
extern void Star_SRPBasic_FreeCooperator(void *c_this, const VS_CHAR *ServiceName );
extern void Star_SRPBasic_GetServerUrlInfo(void *c_this, struct StructOfVSServerUrlInfo *ServerUrlInfo);
extern void Star_SRPBasic_WebServiceRefresh(void *c_this);
extern VS_BOOL Star_SRPBasic_GetWSDL(void *c_this,VS_ULONG WSDLVersion,const VS_CHAR *WebServiceHost,void *BinBuf);
extern void *Star_SRPBasic_XmlToService(void *c_this,void *SXMLInterface,const VS_CHAR *DataPath,const VS_CHAR *SegmentName,SRPParse_PrintProc PrintProc,VS_UWORD Para);
extern void *Star_SRPBasic_GetSRPInterfaceEx(void *c_this, VS_UUID *ServiceID, const VS_CHAR *UserName, const VS_CHAR *UserPass );
extern void *Star_SRPBasic_GetSRPInterface(void *c_this, const VS_CHAR *ServiceName, const VS_CHAR *UserName, const VS_CHAR *UserPass );
extern void *Star_SRPBasic_GetSRPInterface2(void *c_this, const VS_CHAR *ServiceName, VS_GetUserInfoCallBackProc CallBackProc );
extern void *Star_SRPBasic_GetSRPInterfaceEx2(void *c_this, VS_UUID *ServiceID, VS_GetUserInfoCallBackProc CallBackProc );
extern VS_BOOL Star_SRPBasic_ChangeDepend(void *c_this, VS_UUID *OldDependServiceID,VS_UUID *NewDependServiceID,const VS_CHAR *NewServiceName );
extern VS_BOOL Star_SRPBasic_AddDepend(void *c_this, VS_UUID *DependServiceID,const VS_CHAR *NewServiceName );
extern VS_EVENTPARAM_RUNPARAM *Star_SRPBasic_GetRequestBuf(void *c_this);
extern void Star_SRPBasic_FreeResponseBuf(void *c_this,VS_EVENTPARAM_RUNPARAM *ResponseParam);
extern void Star_SRPBasic_FreeRequestBuf(void *c_this,VS_EVENTPARAM_RUNPARAM *RequestParam);
extern VS_EVENTPARAM_RUNPARAM *Star_SRPBasic_ProcessSysObjectEvent(void *c_this,VS_UUID *EventID,VS_EVENTPARAM_RUNPARAM *RequestParam);
extern void *Star_SRPBasic_GetSysObject(void *c_this);
extern VS_CHAR *Star_SRPBasic_GetName(void *c_this,VS_UUID *ObjectID);
extern VS_INT8 *Star_SRPBasic_GetMD5(void *c_this,VS_INT8 *Buf,VS_INT32 BufSize);
extern VS_UWORD Star_SRPBasic_GetTickCount(void *c_this);
extern void Star_SRPBasic_GetID(void *c_this,void *Object,VS_UUID *UuidPtr);
extern VS_BOOL Star_SRPBasic_RegObjectIDChangeNotify(void *c_this,VS_ObjectIDChangeNotifyProc ChangeNotifyProc,VS_UWORD Para);
extern void Star_SRPBasic_UnRegObjectIDChangeNotify(void *c_this,VS_ObjectIDChangeNotifyProc ChangeNotifyProc,VS_UWORD Para);
extern VS_BOOL Star_SRPBasic_RegObjectFreeNotify(void *c_this,VS_ObjectFreeNotifyProc FreeNotifyProc,VS_UWORD Para);
extern void Star_SRPBasic_UnRegObjectFreeNotify(void *c_this,VS_ObjectFreeNotifyProc FreeNotifyProc,VS_UWORD Para);
extern VS_CHAR *Star_SRPBasic_GetRegStr(void *c_this,const VS_CHAR *SubKey,const VS_CHAR *ValueName,const VS_CHAR *DefaultValue);
extern VS_UINT32 Star_SRPBasic_GetRegInt(void *c_this,const VS_CHAR *SubKey,const VS_CHAR *ValueName,VS_UINT32 DefaultValue);
extern VS_ULONG Star_SRPBasic_SetupTimer(void *c_this,VS_INT32 Ticket,VS_TimerProc FunctionAddr,VS_UWORD Para1,VS_UWORD Para2,VS_UWORD Para3,VS_UWORD Para4 );
extern void Star_SRPBasic_KillTimer(void *c_this,VS_ULONG TimerID);
extern VS_ULONG Star_SRPBasic_SetupSocketServer(void *c_this, const VS_CHAR *Interface, VS_UINT16 PortNumber, VS_ULONG *LinkInterfaceStatus,VS_SockAcceptCallBackProc CallBackProc,VS_UWORD Para);
extern VS_ULONG Star_SRPBasic_SetupSocketClient(void *c_this, const VS_CHAR *ServerInterface, const VS_CHAR *ServerName, VS_UINT16 PortNumber, VS_SockEventCallBackProc CallBackProc,VS_UWORD Para );
extern void Star_SRPBasic_CloseSocketConnect(void *c_this, VS_ULONG ConnectionID );
extern VS_BOOL Star_SRPBasic_SocketSend(void *c_this, VS_ULONG MachineID, void *ParaPkg, VS_BOOL Assure );
extern VS_BOOL Star_SRPBasic_SocketSendBin(void *c_this, VS_ULONG MachineID, VS_INT32 BinDataSize, VS_INT8 *BinDataBuf, VS_BOOL Assure );
extern VS_ULONG Star_SRPBasic_SetupSocketTimer(void *c_this, VS_ULONG MachineID, VS_INT32 Ticket,VS_INT32 Counter );
extern void Star_SRPBasic_KillSocketTimer(void *c_this, VS_ULONG MachineID, VS_ULONG TimerIndex );
extern VS_BOOL Star_SRPBasic_SetDataServerAddr(void *c_this,VS_BOOL DirectConnect,const VS_CHAR *DataServerInterface,const VS_CHAR *DataServerName,VS_UINT16 DataServerPort,const VS_CHAR *LocalDataServerInterface,VS_UINT16 LocalDataServerPort);
extern void Star_SRPBasic_RegQueryStaticDataProc(void *c_this, VS_QueryObjectStaticDataProc Proc,VS_UWORD Para);
extern void Star_SRPBasic_UnRegQueryStaticDataProc(void *c_this, VS_QueryObjectStaticDataProc Proc,VS_UWORD Para);
extern void Star_SRPBasic_RegSaveStaticDataProc(void *c_this, VS_SaveObjectStaticDataProc Proc,VS_UWORD Para);
extern void Star_SRPBasic_UnRegSaveStaticDataProc(void *c_this, VS_SaveObjectStaticDataProc Proc,VS_UWORD Para);
extern void Star_SRPBasic_RegClearStaticDataProc(void *c_this, VS_ClearObjectStaticDataProc Proc,VS_UWORD Para);
extern void Star_SRPBasic_UnRegClearStaticDataProc(void *c_this, VS_ClearObjectStaticDataProc Proc,VS_UWORD Para);
extern void Star_SRPBasic_SetServerPara(void *c_this,VS_INT32 MaxClientNumber,VS_INT32 MaxDataServerConnectionNumber,VS_INT32 DataServerOverTime);
extern void Star_SRPBasic_QuyeryStatisticInfo(void *c_this,void *Machine,VS_STATISTICINFO *InfoBuf);
extern VS_BOOL Star_SRPBasic_RegFileCallBack(void *c_this, VS_UUID *ServiceID,VS_FileUpDownLoadCallBackProc FileCallBackProc, VS_UWORD Para );
extern void Star_SRPBasic_UnRegFileCallBack(void *c_this, VS_UUID *ServiceID,VS_FileUpDownLoadCallBackProc FileCallBackProc, VS_UWORD Para );
extern VS_BOOL Star_SRPBasic_RegFileReqCallBack(void *c_this, VS_FileUpDownLoadRequestCallBackProc FileCallBackProc, VS_UWORD Para );
extern void Star_SRPBasic_UnRegFileReqCallBack(void *c_this, VS_FileUpDownLoadRequestCallBackProc FileCallBackProc, VS_UWORD Para );
extern void Star_SRPBasic_GetFileInfo(void *c_this, VS_UPDOWNFILEINFO *InfoPtr );
extern VS_BOOL Star_SRPBasic_StringToUuid(void *c_this,const VS_INT8 *String,VS_UUID *Uuid);
extern VS_INT8 *Star_SRPBasic_UuidToString(void *c_this,VS_UUID *Uuid);
extern VS_UINT16 Star_SRPBasic_GetProgramType(void *c_this);
extern VS_BOOL Star_SRPBasic_IsDefaultServer(void *c_this);
extern VS_BOOL Star_SRPBasic_IsWindowVisible(void *c_this);
extern void Star_SRPBasic_HideWindow(void *c_this);
extern void Star_SRPBasic_ShowWindow(void *c_this);
extern void Star_SRPBasic_SetWindowCaption(void *c_this,const VS_CHAR *Caption);
extern void Star_SRPBasic_ExitVSSystem(void *c_this,const VS_CHAR *ErrorInfo);
extern VS_BOOL Star_SRPBasic_IsAppActive(void *c_this);
extern void Star_SRPBasic_SetIdleActive(void *c_this,VS_BOOL CreateFlag);
extern void Star_SRPBasic_GetVersion(void *c_this,VS_UINT8 *MainVersion,VS_UINT8 *SubVersion,VS_UINT16 *BuildVersion);
extern void Star_SRPBasic_GetVersionInfo(void *c_this,VS_CHAR *InfoBuf,VS_INT32 InfoBufSize);
extern VS_HWND Star_SRPBasic_GetWindowHandle(void *c_this);
extern void Star_SRPBasic_GetWindowSize(void *c_this, VS_INT32 *Width, VS_INT32 *Height );
extern void Star_SRPBasic_SetColor(void *c_this, VS_COLOR Text,VS_COLOR Explane,VS_COLOR ObjName,VS_COLOR AttrType,VS_COLOR Number,VS_COLOR Error );
extern void Star_SRPBasic_SetBkColor(void *c_this, VS_COLOR BkColor );
extern void Star_SRPBasic_ShowStatusMenu(void *c_this, VS_BOOL MenuShowFlag, VS_BOOL StatusShowFlag );
extern VS_HWND Star_SRPBasic_GetClientWndHandle(void *c_this);
extern void Star_SRPBasic_GetClientWndSize(void *c_this, VS_INT32 *Width, VS_INT32 *Height );
extern void Star_SRPBasic_SetClientWndSize(void *c_this, VS_INT32 Width, VS_INT32 Height );
extern void Star_SRPBasic_SetClientWndFocus(void *c_this, VS_HWND hWnd, VS_BOOL NeedAction );
extern void Star_SRPBasic_KillClientWndFocus(void *c_this, VS_HWND hWnd, VS_BOOL NeedAction );
extern void Star_SRPBasic_ClearClientWnd(void *c_this);
extern void Star_SRPBasic_HideClientWnd(void *c_this);
extern void Star_SRPBasic_ShowClientWnd(void *c_this);
extern void Star_SRPBasic_SetClientBkColor(void *c_this, VS_COLOR BkColor );
extern VS_BOOL Star_SRPBasic_GetKeyState(void *c_this,VS_INT32 Key);
extern void Star_SRPBasic_SetWindowStyle(void *c_this, VSWINDOWSTYLE *Style  );
extern void Star_SRPBasic_MoveWindow(void *c_this,VSWINDOWPOSITION *Position,VS_BOOL RepaintFlag);
extern void Star_SRPBasic_GetWindowPos(void *c_this,VSWINDOWPOSITION *Position);
extern void Star_SRPBasic_SetWindowStatus(void *c_this,VS_INT32 Status);
extern void Star_SRPBasic_RegRunEnv_FromParentCallBack(void *c_this, VS_RunEnvCallBackProc CallBack,VS_UWORD Para);
extern void Star_SRPBasic_UnRegRunEnv_FromParentCallBack(void *c_this, VS_RunEnvCallBackProc CallBack,VS_UWORD Para);
extern VS_BOOL Star_SRPBasic_RunEnvToChild(void *c_this,VS_UUID *ObjectID,struct StructOfVSRunEnv *RunEnvInfo);
extern VS_BOOL Star_SRPBasic_RunEnvToParent(void *c_this,struct StructOfVSRunEnv *RunEnvInfo);
extern void Star_SRPBasic_SetMessageHook(void *c_this,VS_SRPMessageProcessHookProc HookProc);
extern void *Star_SRPBasic_GetMessageHook(void *c_this);
extern VS_BOOL Star_SRPBasic_IsInSync(void *c_this);
extern VS_BOOL Star_SRPBasic_IsServiceSync(void *c_this);
extern VS_BOOL Star_SRPBasic_WaitServiceSync(void *c_this,VS_INT32 WaitTimeMs);
extern VS_BOOL Star_SRPBasic_SRPIdle(void *c_this);
extern void Star_SRPBasic_SRPAppActive(void *c_this);
extern void Star_SRPBasic_SRPAppDeactive(void *c_this);
extern void Star_SRPBasic_HyperLink(void *c_this,const VS_CHAR *HyperLink,VS_BOOL CreateNewWindow);
extern void Star_SRPBasic_AppEvent(void *c_this,VS_ULONG EventID,const VS_CHAR *EventInfo);
extern void Star_SRPBasic_SetExceptHandler(void *c_this,VS_ExceptHandlerProc ExceptHandlerProc);
extern void *Star_SRPBasic_CreateIndex_Nor(void *c_this,VS_INT32 KeyNumber,VS_UINT16 HashTableBits);
extern void *Star_SRPBasic_CreateIndexCmp_Nor(void *c_this,VS_INT32 KeyNumber,VS_UINT16 HashTableBits,VS_IndexCompareProc CompareProc);
extern void *Star_SRPBasic_CreateIDIndex_Nor(void *c_this,VS_UINT16 HashTableBits);
extern void *Star_SRPBasic_CreateIDIndexEx_Nor(void *c_this,VS_UINT16 HashTableBits);
extern void *Star_SRPBasic_CreateIndex_Dbg(void *c_this,VS_INT32 KeyNumber,VS_UINT16 HashTableBits,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void *Star_SRPBasic_CreateIndexCmp_Dbg(void *c_this,VS_INT32 KeyNumber,VS_UINT16 HashTableBits,VS_IndexCompareProc CompareProc,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void *Star_SRPBasic_CreateIDIndex_Dbg(void *c_this,VS_UINT16 HashTableBits,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void *Star_SRPBasic_CreateIDIndexEx_Dbg(void *c_this,VS_UINT16 HashTableBits,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void Star_SRPBasic_InsertOneKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_INT8 *Buf);
extern VS_INT8 *Star_SRPBasic_FindOneKey(void *c_this,void *IndexContext,VS_UWORD MainKey);
extern VS_INT8 *Star_SRPBasic_DelOneKey(void *c_this,void *IndexContext,VS_UWORD MainKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstOneKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey);
extern VS_INT8 *Star_SRPBasic_QueryNextOneKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstOneKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey);
extern VS_INT8 *Star_SRPBasic_QueryNextOneKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey);
extern void Star_SRPBasic_InsertTwoKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey,VS_INT8 *Buf);
extern VS_INT8 *Star_SRPBasic_FindTwoKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey);
extern VS_INT8 *Star_SRPBasic_DelTwoKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstTwoKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPBasic_QueryNextTwoKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstTwoKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPBasic_QueryNextTwoKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstTwoKey_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPBasic_QueryNextTwoKey_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstTwoKeyA_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPBasic_QueryNextTwoKeyA_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey);
extern void Star_SRPBasic_InsertThreeKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD ThirdKey,VS_INT8 *Buf);
extern VS_INT8 *Star_SRPBasic_FindThreeKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD ThirdKey);
extern VS_INT8 *Star_SRPBasic_DelThreeKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstThreeKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryNextThreeKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstThreeKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryNextThreeKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstThreeKey_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryNextThreeKey_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstThreeKeyA_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryNextThreeKeyA_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstThreeKey_S(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryNextThreeKey_S(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstThreeKeyA_S(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPBasic_QueryNextThreeKeyA_S(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD *ThirdKey);
extern void Star_SRPBasic_InsertIDKey(void *c_this,void *IndexContext,VS_UUID *UuidKey,VS_INT8 *Buf );
extern VS_INT8 *Star_SRPBasic_FindIDKey(void *c_this,void *IndexContext,VS_UUID *UuidKey);
extern VS_INT8 *Star_SRPBasic_DelIDKey(void *c_this,void *IndexContext,VS_UUID *UuidKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstIDKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey);
extern VS_INT8 *Star_SRPBasic_QueryNextIDKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstIDKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey);
extern VS_INT8 *Star_SRPBasic_QueryNextIDKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey);
extern void Star_SRPBasic_InsertIDKeyEx(void *c_this,void *IndexContext,VS_UUID *UuidKey,VS_UWORD ExKey,VS_INT8 *Buf);
extern VS_INT8 *Star_SRPBasic_FindIDKeyEx(void *c_this,void *IndexContext,VS_UUID *UuidKey,VS_UWORD ExKey);
extern VS_INT8 *Star_SRPBasic_DelIDKeyEx(void *c_this,void *IndexContext,VS_UUID *UuidKey,VS_UWORD ExKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstIDKeyEx(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT8 *Star_SRPBasic_QueryNextIDKeyEx(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstIDKeyEx_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT8 *Star_SRPBasic_QueryNextIDKeyEx_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT8 *Star_SRPBasic_QueryFirstIDKeyExA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT8 *Star_SRPBasic_QueryNextIDKeyExA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT32 Star_SRPBasic_GetKeyNumber(void *c_this,void *IndexContext);
extern void Star_SRPBasic_DelAllKey(void *c_this,void *IndexContext);
extern void Star_SRPBasic_DestoryIndex(void *c_this,void *IndexContext);
extern VS_ULONG Star_SRPBasic_GetHashValue(void *c_this,void *Key,VS_ULONG Length,VS_ULONG InitValue);
extern void *Star_SRPBasic_CreateMemory_Nor(void *c_this,VS_INT32 ItemSize);
extern void *Star_SRPBasic_CreateMemory_Dbg(void *c_this,VS_INT32 ItemSize,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void *Star_SRPBasic_GetMemoryPtr_Nor(void *c_this,void *MemoryContext);
extern void *Star_SRPBasic_GetMemoryPtr_Dbg(void *c_this,void *MemoryContext,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void *Star_SRPBasic_QueryFirstMemoryPtr(void *c_this,void *MemoryContext,VS_QUERYRECORD *QueryRecord);
extern void *Star_SRPBasic_QueryNextMemoryPtr(void *c_this,void *MemoryContext,VS_QUERYRECORD *QueryRecord);
extern void Star_SRPBasic_FreeMemoryPtr(void *c_this,void *MemoryContext,void *Ptr);
extern void Star_SRPBasic_ClearMemory(void *c_this,void *MemoryContext);
extern void Star_SRPBasic_DestoryMemory(void *c_this,void *MemoryContext);
extern void *Star_SRPBasic_Malloc_Nor(void *c_this,VS_INT32 MemorySize);
extern void *Star_SRPBasic_Malloc_Dbg(void *c_this,VS_INT32 MemorySize,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void Star_SRPBasic_Free(void *c_this,void *MemoryPtr);
extern void Star_SRPBasic_GetMemoryUsed(void *c_this, VS_UWORD *KernelAllocSize,VS_UWORD *DataAllocSize,VS_UWORD *AppAllocSize, VS_UWORD *ScriptMemoryUsed );
extern VS_ULONG Star_SRPBasic_GetMachineID(void *c_this,void *Machine);
extern void *Star_SRPBasic_FindMachine(void *c_this,VS_ULONG MachineID);
extern VS_BOOL Star_SRPBasic_MD5ToUuid(void *c_this,const VS_INT8 *String,VS_UUID *Uuid);
extern VS_INT8 *Star_SRPBasic_UuidToMD5(void *c_this,VS_UUID *Uuid);
extern VS_INT8 *Star_SRPBasic_StringToUtf8(void *c_this,const VS_INT8 *String);
extern VS_INT8 *Star_SRPBasic_Utf8ToString(void *c_this,const VS_INT8 *String);
extern VS_BOOL Star_SRPBasic_ProgramRestart(void *c_this);
extern VS_BOOL Star_SRPBasic_HttpDownLoad(void *c_this, VS_UUID *AttachObjectID, const VS_CHAR *ServerUrl,const VS_CHAR *ClientPath,const VS_CHAR *FileName, VS_FileUpDownLoadCallBackProc CallBackProc, VS_UUID *ObjectID, VS_UWORD Para, VS_BOOL SaveFileFlag );
extern void Star_SRPBasic_HttpDownLoadAbort(void *c_this);
extern void Star_SRPBasic_RegWebDownFunction(void *c_this,VS_WebDownInfoProc CallBackProc,VS_UWORD Para);
extern void Star_SRPBasic_UnRegWebDownFunction(void *c_this,VS_WebDownInfoProc CallBackProc,VS_UWORD Para);
extern void Star_SRPBasic_WebDownPrint(void *c_this,VS_ULONG uMes, const VS_CHAR *FileName, VS_UINT64 MaxLength, VS_UINT64 CurLength);
extern VS_BOOL Star_SRPBasic_CanSetStaticData(void *c_this,void *Object,VS_ULONG DataSize);
extern VS_BOOL Star_SRPBasic_SetStaticData(void *c_this, VS_UUID *ObjectID,VS_ULONG UniqueDataUnitID,VS_ULONG DataSize,VS_INT8 *DataBuf,VS_STATICID *RetDataVersion);
extern void *Star_SRPBasic_GetEnvDependCheckInfo(void *c_this,const VS_CHAR *ServiceName,VS_ULONG *Size);
extern void Star_SRPBasic_SetEnvDependCheckInfo(void *c_this,VS_ULONG Size,void *Buf);
extern VS_UINT8 Star_SRPBasic_GetEnvStartType(void *c_this);
extern void *Star_SRPBasic_GetEnvPara(void *c_this);
extern void Star_SRPBasic_SetEnvPara(void *c_this,void *Para);
extern void Star_SRPBasic_SetEnvInputPara(void *c_this,void *Para);
extern void *Star_SRPBasic_GetEnvInputPara(void *c_this);
extern VS_CHAR *Star_SRPBasic_GetEnvParentUrl(void *c_this);
extern void Star_SRPBasic_SetEnvCurrentUrl(void *c_this,const VS_CHAR *Url);
extern VS_INT32 Star_SRPBasic_RedirectToUrlRequest(void *c_this,const VS_CHAR *Url,void *ParaPkg,RedirectToUrl_InfoProc CallBackProc,VS_UWORD Para,const VS_CHAR *WorkDirectory,const VS_CHAR *ChildTermScript);
extern void Star_SRPBasic_RedirectToUrlFail(void *c_this,const VS_CHAR *Url);
extern void Star_SRPBasic_SetRedirectToUrlInfo(void *c_this,void *ParaPkg);
extern void Star_SRPBasic_RedirectToUrlAbort(void *c_this);
extern VS_BOOL Star_SRPBasic_OpenLuaEdit(void *c_this,const VS_CHAR *Module,VS_ULONG Config,VS_BOOL CloseEnable);
extern void Star_SRPBasic_LuaEditDisp(void *c_this,const VS_CHAR *Info);
extern void Star_SRPBasic_CloseLuaEdit(void *c_this);
extern void Star_SRPBasic_LuaEditHelp(void *c_this,VS_INT32 Type,const VS_CHAR *HelpInfo);
extern void Star_SRPBasic_RegDllCallBack(void *c_this, VS_MsgCallBackProc MsgCallBackProc, VS_UWORD MsgCallBackPara );
extern void Star_SRPBasic_UnRegDllCallBack(void *c_this, VS_MsgCallBackProc MsgCallBackProc, VS_UWORD MsgCallBackPara );
extern void Star_SRPBasic_CreateUuid(void *c_this,VS_UUID *UuidPtr);
extern void Star_SRPBasic_GetSRPTempPath(void *c_this,VS_ULONG BufSize,VS_CHAR *Buf);
extern VS_BOOL Star_SRPBasic_Compress(void *c_this,VS_UINT8 *dest,VS_ULONG *destLen,VS_UINT8 *source,VS_ULONG sourceLen );
extern VS_BOOL Star_SRPBasic_UnCompress(void *c_this,VS_UINT8 *dest,VS_ULONG *destLen,VS_UINT8 *source,VS_ULONG sourceLen );
extern void *Star_SRPBasic_CreateMemoryFile(void *c_this);
extern void *Star_SRPBasic_GetEnvMemoryFile(void *c_this);
extern void Star_SRPBasic_SetEnvMemoryFile(void *c_this,void *MemoryFile);
extern void Star_SRPBasic_GetUrl(void *c_this,VS_CHAR *Buf,VS_INT32 BufSize);
extern VS_BOOL Star_SRPBasic_ToAbsoluteUrl(void *c_this,const VS_CHAR *InputUrl,VS_CHAR *OutputUrl,VS_INT32 OutputUrlBufSize );
extern VS_INT32 Star_SRPBasic_RunFromUrl(void *c_this,const VS_CHAR *Url,VS_INT8 RestartFlag,VS_BOOL WaitFlag);
extern VS_INT32 Star_SRPBasic_RunFromBuf(void *c_this,VS_CHAR *Buf,VS_ULONG BufSize,VS_INT8 RestartFlag,VS_BOOL WaitFlag);
extern VS_BOOL Star_SRPBasic_IsLoadServiceBusy(void *c_this);
extern VS_BOOL Star_SRPBasic_IsLoadServiceIdle(void *c_this);
extern void Star_SRPBasic_SetDepend(void *c_this,const VS_CHAR *ServiceName,VS_BOOL DefaultUrlFlag);
extern VS_BOOL Star_SRPBasic_GetServicePathByName(void *c_this,const VS_CHAR *ServiceName,VS_CHAR *ServicePath,VS_ULONG ServicePathSize);
extern void Star_SRPBasic_InsertSearchPath(void *c_this,const VS_CHAR *SearchPath);
extern void Star_SRPBasic_ClearSearchPath(void *c_this);
extern VS_CHAR *Star_SRPBasic_FirstSearchPath(void *c_this,VS_QUERYRECORD *QueryRecord);
extern VS_CHAR *Star_SRPBasic_NextSearchPath(void *c_this,VS_QUERYRECORD *QueryRecord);
extern VS_BOOL Star_SRPBasic_GetSaveFile(void *c_this, const VS_CHAR *Caption, const VS_CHAR *Filter, VS_ULONG FilterIndex, const VS_CHAR *DefExt, VS_CHAR *FileNameBuf,VS_INT32 FileNameBufSize);
extern VS_BOOL Star_SRPBasic_GetOpenFile(void *c_this, const VS_CHAR *Caption, const VS_CHAR *Filter, VS_ULONG FilterIndex, const VS_CHAR *DefExt, VS_CHAR *FileNameBuf,VS_INT32 FileNameBufSize);
extern void Star_SRPBasic_SaveServiceStaticData(void *c_this,VS_UUID *ServiceID);
extern void Star_SRPBasic_GetStaticVersion(void *c_this, VS_ULONG DataSize,VS_INT8 *DataBuf,VS_STATICID *RetDataVersion);
extern void *Star_SRPBasic_GetSysDocClass(void *c_this);
extern void *Star_SRPBasic_FirstDoc(void *c_this,VS_QUERYRECORD *QueryRecord,VS_CHAR **DocName);
extern void *Star_SRPBasic_NextDoc(void *c_this,VS_QUERYRECORD *QueryRecord,VS_CHAR **DocName);
extern void Star_SRPBasic_RegisterDoc(void *c_this,void *DocObject,const VS_CHAR *DocName);
extern void Star_SRPBasic_UnRegisterDoc(void *c_this,void *DocObject);
extern VS_EVENTPARAM_RUNPARAM *Star_SRPBasic_ProcessSysDocEvent(void *c_this,VS_UUID *DocObjectID,VS_UUID *EventID,VS_EVENTPARAM_RUNPARAM *RequestParam);
extern VS_BOOL Star_SRPBasic_RegDocEventFunction(void *c_this,VS_UUID *DocObjectID,VS_UUID *EventID, void *FuncAddr,VS_UWORD Para);
extern void Star_SRPBasic_UnRegDocEventFunction(void *c_this,VS_UUID *DocObjectID,VS_UUID *EventID, void *FuncAddr,VS_UWORD Para );
extern void Star_SRPBasic_ToClipBoard(void *c_this,const VS_CHAR *Info);
extern VS_CHAR *Star_SRPBasic_FromClipBoard(void *c_this);
extern VS_BOOL Star_SRPBasic_IsWindowlessSite(void *c_this);
extern VS_BOOL Star_SRPBasic_IsWindowlessTransparent(void *c_this);
extern void Star_SRPBasic_RegWindowlessSiteCallBack(void *c_this,struct VSWindowlessSiteCallBackInfo *CallBackInfo, VS_UUID *ObjectID, VS_UWORD Para );
extern void Star_SRPBasic_UnRegWindowlessSiteCallBack(void *c_this,struct VSWindowlessSiteCallBackInfo *CallBackInfo, VS_UUID *ObjectID, VS_UWORD Para );
extern void Star_SRPBasic_Windowless_Draw(void *c_this, void *hDC, void *rcBounds, void *rcInvalid );
extern VS_BOOL Star_SRPBasic_Windowless_Message(void *c_this, VS_ULONG uMes,VS_UWORD wParam,VS_UWORD LParam,VS_UWORD *Result );
extern VS_BOOL Star_SRPBasic_Windowless_GetDropTarget(void *c_this, void **DropTarget );
extern void Star_SRPBasic_Windowless_Redraw(void *c_this, VS_BOOL fErase );
extern void Star_SRPBasic_Windowless_GetDC(void *c_this, void **hDC,VS_RECT *rEct );
extern void Star_SRPBasic_Windowless_ReleaseDC(void *c_this, void *hDC );
extern VS_BOOL Star_SRPBasic_SetClientPort(void *c_this,const VS_CHAR *ClientInterface,VS_UINT16 ClientPortNumber);
extern VS_BOOL Star_SRPBasic_SetDebugPort(void *c_this,const VS_CHAR *DebugInterface,VS_UINT16 DebugPortNumber);
extern VS_BOOL Star_SRPBasic_SetTelnetPort(void *c_this,VS_UINT16 TelnetPortNumber);
extern VS_BOOL Star_SRPBasic_SetOutputPort(void *c_this,const VS_CHAR *OutputHost,VS_UINT16 OutputPortNumber);
extern VS_BOOL Star_SRPBasic_SetWebServerPort(void *c_this,const VS_CHAR *WebServerHost,VS_UINT16 WebServerPortNumber,VS_INT32 ConnectionNumber,VS_ULONG PostSize);
extern VS_UUID *Star_SRPBasic_GetVSObjectID(void *c_this,VS_INT32 Which);
extern void *Star_SRPBasic_GetSRPControlInterface(void *c_this);
extern void *Star_SRPBasic_GetFunctionParaInterface(void *c_this);
extern void *Star_SRPBasic_GetParaPkgInterface(void *c_this);
extern void *Star_SRPBasic_GetSRPLockInterface(void *c_this);
extern void *Star_SRPBasic_GetSXMLInterface(void *c_this);
extern void *Star_SRPBasic_GetSRPBinBufInterface(void *c_this);
extern void *Star_SRPBasic_GetCommInterface(void *c_this);
extern void *Star_SRPBasic_GetFileDiskInterface(void *c_this);
extern void Star_SRPBasic_GetSRPConfigPath(void *c_this,VS_ULONG BufSize,VS_CHAR *Buf);
extern VS_BOOL Star_SRPBasic_RegTempFile(void *c_this,const VS_CHAR *TempFileName,const VS_CHAR *OriFileName);
extern VS_CHAR *Star_SRPBasic_GetRegTempFile(void *c_this,const VS_CHAR *OriFileName,VS_CHAR *Buf,VS_INT32 BufSize);
extern void Star_SRPBasic_UnRegTempFile(void *c_this,const VS_CHAR *TempFileName);
extern void Star_SRPBasic_GetConfigResult(void *c_this,VS_BOOL *DebugCfgResult,VS_BOOL *DirectClientCfgResult,VS_BOOL *TelnetCfgResult,VS_BOOL *WebServerCfgResult);
extern VS_CHAR *Star_SRPBasic_GetConfigEnvTag(void *c_this);
extern void Star_SRPBasic_RegDispatchCallBack(void *c_this,VS_SRPDispatchCallBackProc CallBack,VS_UWORD Para);
extern void Star_SRPBasic_UnRegDispatchCallBack(void *c_this,VS_SRPDispatchCallBackProc CallBack,VS_UWORD Para);
extern void *Star_SRPBasic_Dup(void *c_this);
extern void *Star_SRPBasic_QueryInterface(void *c_this, VS_UUID *InterfaceID );
extern VS_BOOL Star_SRPBasic_LockLuaTable(void *c_this);
extern VS_BOOL Star_SRPBasic_UnLockLuaTable(void *c_this);
extern VS_UUID *Star_SRPBasic_GetIDEx(void *c_this,void *Object);
extern VS_BOOL Star_SRPBasic_IsRootService(void *c_this);
extern void Star_SRPBasic_AddRef(void *c_this);
extern VS_INT32 Star_SRPBasic_GetRef(void *c_this);
extern void Star_SRPBasic_GetConfig(void *c_this,void *XmlInterface);
extern void Star_SRPBasic_GetConfigHost(void *c_this, VS_CHAR *Buf,VS_INT32 BufSize );
extern VS_CHAR *Star_SRPBasic_LuaToLString(void *c_this,VS_INT32 index,VS_ULONG *len);
extern VS_BOOL Star_SRPBasic_LuaIsInt(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_ImportServiceFromXmlBuf(void *c_this, const VS_CHAR *Buf, VS_BOOL LoadRunModule );
extern VS_BOOL Star_SRPBasic_DoFileEx(void *c_this, const VS_CHAR *ScriptInterface,const VS_CHAR *FileName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8,const VS_CHAR *ModuleName );
extern VS_BOOL Star_SRPBasic_PostDoFileEx(void *c_this, const VS_CHAR *ScriptInterface,const VS_CHAR *FileName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8,const VS_CHAR *ModuleName );
extern void Star_SRPBasic_AddRefEx(void *c_this,void *Object);
extern void Star_SRPBasic_DelRefEx(void *c_this,void *Object);
extern VS_BOOL Star_SRPBasic_InitRaw(void *c_this,const VS_CHAR *ScriptInterface,void *SRPInterface);
extern VS_BOOL Star_SRPBasic_LoadRawModule(void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *ModuleName,const VS_CHAR *FileOrString,VS_BOOL IsString,VS_CHAR **ErrorInfo);
extern VS_BOOL Star_SRPBasic_LoadRawModuleEx(void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *ModuleName,void *Object,VS_CHAR **ErrorInfo);
extern VS_BOOL Star_SRPBasic_DefScriptRawType(void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *ModuleName,const VS_CHAR *FileOrString,VS_BOOL IsString,VS_CHAR **ErrorInfo);
extern void *Star_SRPBasic_GetRawContextBuf(void *c_this,void *Object,const VS_CHAR *ScriptInterface);
extern VS_INT32 Star_SRPBasic_NewScriptRawTypeGroup(void *c_this);
extern VS_INT32 Star_SRPBasic_GetScriptRawTypeGroup(void *c_this,VS_INT32 ScriptRawType);
extern VS_INT32 Star_SRPBasic_RegScriptRawType(void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *TypeGroupName,VS_INT32 GroupIndex,const VS_CHAR *TypeName);
extern VS_INT32 Star_SRPBasic_GetScriptRawType(void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *TypeGroupName,const VS_CHAR *TypeName);
extern VS_CHAR *Star_SRPBasic_GetScriptRawTypeEx(void *c_this,VS_INT32 RawType,VS_CHAR **ScriptInterface,VS_CHAR **TypeGroupName);
extern void Star_SRPBasic_ReleaseOwner(void *c_this);
extern VS_BOOL Star_SRPBasic_ReleaseOwnerEx(void *c_this,void *Object);
extern VS_BOOL Star_SRPBasic_ReleaseOwnerExForScript(void *c_this,const VS_CHAR *ScriptInterface,void *Object);
extern void Star_SRPBasic_CaptureOwnerExForScript(void *c_this,const VS_CHAR *ScriptInterface,void *Object);
extern VS_INT32 Star_SRPBasic_GetRefEx(void *c_this,void *Object);
extern VS_CHAR *Star_SRPBasic_GetRefInfo(void *c_this,void *Object);
extern void Star_SRPBasic_LogObjectFreeByUnLock(void *c_this,VS_BOOL Flag);
extern void Star_SRPBasic_SUnLockGC(void *c_this);
extern VS_INT32 Star_SRPBasic_GetLastError(void *c_this);
extern VS_CHAR *Star_SRPBasic_GetLastErrorInfo(void *c_this,VS_UINT32 *LineIndex,VS_CHAR **SourceName);
extern VS_CHAR *Star_SRPBasic_GetCorePath(void *c_this);
extern VS_CHAR *Star_SRPBasic_GetUserPath(void *c_this);
extern VS_CHAR *Star_SRPBasic_GetLocalIP(void *c_this);
extern VS_INT32 Star_SRPBasic_GetLocalIPEx(void *c_this,SOCKADDR_IN *SockAddr,VS_INT32 ItemNumber);
extern void Star_SRPBasic_LuaPushInt64(void *c_this,VS_INT64 Value);
extern VS_INT64 Star_SRPBasic_LuaToInt64(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsInt64(void *c_this, VS_INT32 Index );
extern void Star_SRPBasic_LuaPushUWord(void *c_this,VS_UWORD Value);
extern VS_UWORD Star_SRPBasic_LuaToUWord(void *c_this,VS_INT32 Index );
extern VS_BOOL Star_SRPBasic_LuaIsUWord(void *c_this,VS_INT32 Index );
extern VS_UINT32 Star_SRPBasic_GetObjectNum(void *c_this);
extern void Star_SRPBinBuf_Release(void *c_this);
extern void Star_SRPBinBuf_Init(void *c_this,VS_UINT32 BufSize);
extern VS_UINT32 Star_SRPBinBuf_GetSize(void *c_this);
extern VS_UINT32 Star_SRPBinBuf_GetOffset(void *c_this);
extern VS_INT8 *Star_SRPBinBuf_GetBuf(void *c_this);
extern void Star_SRPBinBuf_Clear(void *c_this);
extern void Star_SRPBinBuf_ClearEx(void *c_this, VS_UINT32 Offset, VS_UINT32 Length );
extern VS_BOOL Star_SRPBinBuf_Set(void *c_this,VS_UINT32 Offset,VS_UINT32 Length,const VS_INT8 *Buf);
extern VS_BOOL Star_SRPBinBuf_Get(void *c_this,VS_UINT32 Offset,VS_UINT32 Length,VS_INT8 *Buf);
extern VS_INT8 *Star_SRPBinBuf_GetBufPtr(void *c_this,VS_UINT32 Offset);
extern VS_INT8 *Star_SRPBinBuf_GetBufPtrEx(void *c_this,VS_UINT32 Offset,VS_UINT32 Length);
extern VS_BOOL Star_SRPBinBuf_SetOffset(void *c_this,VS_UINT32 Offset);
extern VS_BOOL Star_SRPBinBuf_Fill(void *c_this,VS_UINT32 Offset,VS_UINT32 Length,VS_UINT8 Value);
extern VS_BOOL Star_SRPBinBuf_Expand(void *c_this,VS_INT32 NewBufSize);
extern VS_BOOL Star_SRPBinBuf_PackObject(void *c_this,void *Object);
extern VS_BOOL Star_SRPBinBuf_UnPackObject(void *c_this,void *Object);
extern VS_BOOL Star_SRPBinBuf_ToUTF8(void *c_this);
extern VS_BOOL Star_SRPBinBuf_ToAnsi(void *c_this);
extern void *Star_SRPBinBuf_Dup(void *c_this);
/*extern void Star_SRPBinBuf_Print(void *c_this,VS_UINT32 Offset,const VS_CHAR *format,...); */
/*extern void Star_SRPBinBuf_PrintVar(void *c_this,VS_UINT32 Offset,const VS_CHAR *format,va_list argList); */
extern void Star_SRPBinBuf_Insert(void *c_this,VS_UINT32 Offset,VS_UINT32 Length,VS_INT8 *Buf);
extern VS_INT32 Star_SRPBinBuf_FindStr(void *c_this,VS_UINT32 Offset,const VS_CHAR *Str);
extern VS_INT32 Star_SRPBinBuf_FindStri(void *c_this,VS_UINT32 Offset,const VS_CHAR *Str);
extern VS_BOOL Star_SRPBinBuf_SetLightBuf(void *c_this,VS_UINT32 Length,VS_INT8 *Buf);
extern VS_BOOL Star_SRPBinBuf_IsLightBuf(void *c_this);
extern void Star_SRPBinBuf_AddRef(void *c_this);
extern VS_INT32 Star_SRPBinBuf_GetRef(void *c_this);
extern VS_BOOL Star_SRPBinBuf_AnsiToUnicode(void *c_this,const VS_CHAR *Code,VS_INT32 BytesPerChar);
extern VS_BOOL Star_SRPBinBuf_UnicodeToAnsi(void *c_this,const VS_CHAR *Code,VS_INT32 BytesPerChar);
extern VS_ULONG Star_SRPBinBuf_WriteFromMemoryFile(void *c_this,void *SRPInterface,VS_ULONG Offset,const VS_CHAR *FileName);
extern VS_INT8 *Star_SRPBinBuf_GetMD5(void *c_this);
extern VS_ULONG Star_SRPBinBuf_GetHashValue(void *c_this);
extern void Star_SRPBinBuf_ReleaseOwner(void *c_this);
extern void Star_SRPBinBuf_FromRaw(void *c_this,VS_BOOL In_FromBytesArray);
extern VS_BOOL Star_SRPBinBuf_IsFromRaw(void *c_this);
extern void Star_SRPParaPkg_Release(void *c_this);
extern VS_INT32 Star_SRPParaPkg_GetNumber(void *c_this);
extern void Star_SRPParaPkg_Clear(void *c_this);
extern VS_BOOL Star_SRPParaPkg_InsertInt(void *c_this,VS_INT32 Index,VS_INT32 Para);
extern VS_BOOL Star_SRPParaPkg_InsertFloat(void *c_this,VS_INT32 Index,VS_DOUBLE Para);
extern VS_BOOL Star_SRPParaPkg_InsertStr(void *c_this,VS_INT32 Index,const VS_CHAR *Para);
extern VS_BOOL Star_SRPParaPkg_InsertBin(void *c_this,VS_INT32 Index,VS_INT8 *Para,VS_INT32 Size);
extern VS_BOOL Star_SRPParaPkg_InsertTime(void *c_this,VS_INT32 Index,VS_TIME *hTime);
extern VS_BOOL Star_SRPParaPkg_InsertEmpty(void *c_this,VS_INT32 Index);
extern VS_BOOL Star_SRPParaPkg_ExChange(void *c_this,VS_INT32 DesIndex,VS_INT32 SrcIndex);
extern void Star_SRPParaPkg_Del(void *c_this,VS_INT32 Index);
extern VS_INT32 Star_SRPParaPkg_GetType(void *c_this,VS_INT32 Index);
extern VS_INT32 Star_SRPParaPkg_GetInt(void *c_this,VS_INT32 Index);
extern VS_DOUBLE Star_SRPParaPkg_GetFloat(void *c_this,VS_INT32 Index);
extern VS_CHAR *Star_SRPParaPkg_GetStr(void *c_this,VS_INT32 Index);
extern VS_INT8 *Star_SRPParaPkg_GetBin(void *c_this,VS_INT32 Index,VS_INT32 *Length);
extern VS_BOOL Star_SRPParaPkg_GetTime(void *c_this,VS_INT32 Index,VS_TIME *hTime);
extern void *Star_SRPParaPkg_Dup(void *c_this);
extern VS_BOOL Star_SRPParaPkg_AppendFrom(void *c_this,void *ParaPkg);
extern void Star_SRPParaPkg_SetChangeFlag(void *c_this,VS_INT32 Index);
extern void Star_SRPParaPkg_ClearChangeFlag(void *c_this,VS_INT32 Index);
extern void Star_SRPParaPkg_SetChangeFlagEx(void *c_this);
extern void Star_SRPParaPkg_ClearChangeFlagEx(void *c_this);
extern VS_BOOL Star_SRPParaPkg_IsChangeFlag(void *c_this,VS_INT32 Index);
extern VS_BOOL Star_SRPParaPkg_IsChangeFlagEx(void *c_this);
extern VS_INT8 *Star_SRPParaPkg_SaveChangeToBuf(void *c_this, VS_BOOL CompressFlag,VS_INT32 *RetSize );
extern VS_INT8 *Star_SRPParaPkg_SaveChangeToBufEx(void *c_this, VS_BOOL CompressFlag,VS_INT32 *RetSize );
extern VS_BOOL Star_SRPParaPkg_LoadChangeFromBuf(void *c_this, VS_INT32 BufSize, VS_INT8 *Buf );
extern void Star_SRPParaPkg_FreeBuf(void *c_this, VS_INT8 *Buf );
extern void Star_SRPParaPkg_AddRef(void *c_this);
extern VS_INT32 Star_SRPParaPkg_GetRef(void *c_this);
extern VS_BOOL Star_SRPParaPkg_InsertBool(void *c_this,VS_INT32 Index,VS_BOOL Para);
extern VS_BOOL Star_SRPParaPkg_GetBool(void *c_this,VS_INT32 Index);
extern VS_BOOL Star_SRPParaPkg_InsertObject(void *c_this,VS_INT32 Index,void *Object);
extern void *Star_SRPParaPkg_GetObject(void *c_this,VS_INT32 Index);
extern VS_BOOL Star_SRPParaPkg_InsertParaPackage(void *c_this,VS_INT32 Index,void *ParaPkg);
extern void *Star_SRPParaPkg_GetParaPackage(void *c_this,VS_INT32 Index);
extern VS_UINT32 Star_SRPParaPkg_GetMaxSize(void *c_this);
extern void Star_SRPParaPkg_SetScriptRawType(void *c_this,VS_INT32 RawType);
extern VS_INT32 Star_SRPParaPkg_GetScriptRawType(void *c_this);
extern void Star_SRPParaPkg_ReleaseOwner(void *c_this);
/*extern void *Star_SRPParaPkg_Build(void *c_this,const VS_CHAR *TypeSet,...); */
extern void Star_SRPParaPkg_AttachArrayObject(void *c_this,void *Object,const VS_CHAR *VarName,VS_INT32 StartIndexOfArray);
extern void *Star_SRPParaPkg_BuildVar(void *c_this,const VS_CHAR *TypeSet,va_list argList);
extern void *Star_SRPParaPkg_AsDict(void *c_this,VS_BOOL IsDict);
extern VS_BOOL Star_SRPParaPkg_IsDict(void *c_this);
extern VS_INT32 Star_SRPParaPkg_FindDict(void *c_this,const VS_CHAR *Key);
extern VS_INT32 Star_SRPParaPkg_FindDictEx(void *c_this,VS_INT32 Key);
extern VS_BOOL Star_SRPParaPkg_FromJSon(void *c_this,const VS_CHAR *Buf);
extern VS_CHAR *Star_SRPParaPkg_ToJSon(void *c_this);
extern VS_BOOL Star_SRPParaPkg_InsertInt64(void *c_this,VS_INT32 Index,VS_INT64 Para);
extern VS_INT64 Star_SRPParaPkg_GetInt64(void *c_this,VS_INT32 Index);
extern VS_BOOL Star_SRPParaPkg_InsertStrEx(void *c_this,VS_INT32 Index,const VS_CHAR *Para,VS_UINT32 ParaLength);
extern VS_CHAR *Star_SRPParaPkg_GetStrEx(void *c_this,VS_INT32 Index,VS_UINT32 *ParaLength);
extern VS_BOOL Star_SRPParaPkg_InsertBinEx(void *c_this,VS_INT32 Index,VS_INT8 *Para,VS_INT32 Size,VS_BOOL FromBytesArray);
extern VS_INT8 *Star_SRPParaPkg_GetBinEx(void *c_this,VS_INT32 Index,VS_INT32 *Length,VS_BOOL *FromBytesArray);
extern void Star_SRPI_Release(void *c_this);
extern VS_INT32 Star_SRPI_GetObjectRegisterInfo(void *c_this,VS_UUID ObjectID,VS_INT8 *InBuf,VS_INT32 InBufLength,VS_INT8 *OutBuf,VS_INT32 OutBufSize);
extern void Star_SRPI_RegisterObjectDependency(void *c_this,VS_UUID ModuleID,VS_UUID ObjectID,VS_INT32 DependIndex,VS_UUID DependObjectID,VS_INT32 DependType,VS_INT32 DependItemNumber,VS_DEPENDATTRIBUTE *DependItemList);
extern void Star_SRPI_RegisterObjectFunction(void *c_this,VS_UUID ModuleID,VS_UUID ObjectID,VS_UUID FunctionID,void *CallBackPtr,VS_INT32 DependIndexNumber,VS_INT32 *DependIndex);
extern void Star_SRPI_RegisterObjectSysEvent(void *c_this,VS_UUID ModuleID,VS_UUID ObjectID,void *CallBackPtr,VS_INT32 DependIndexNumber,VS_INT32 *DependIndex);
extern void Star_SRPI_RegisterObjectSysEditEvent(void *c_this,VS_UUID ModuleID,VS_UUID ObjectID,void *CallBackPtr,VS_INT32 DependIndexNumber,VS_INT32 *DependIndex);
extern void Star_SRPI_RegisterObjectInEvent(void *c_this,VS_UUID ModuleID,VS_UUID ObjectID,VS_UUID InEventID,void *CallBackPtr,VS_INT32 DependIndexNumber,VS_INT32 *DependIndex);
extern void Star_SRPI_RegisterQueryObjectInfo(void *c_this,VS_UUID ModuleID,VS_UUID ObjectID,void *CallBackPtr);
extern VS_INT32 Star_SRPI_RegisterDynamicModule(void *c_this, VS_UUID ModuleID, VSModuleFunction_ModuleInitProc ModuleInitProc, VSModuleFunction_ModuleTermProc ModuleTermProc, VSModuleFunction_RequestRegisterObjectProc RequestRegisterObjectProc);
extern VS_UINT32 Star_SRPI_GetOsType(void *c_this);
extern VS_BOOL Star_SRPI_StringToUuid(void *c_this,const VS_INT8 *String,VS_UUID *Uuid);
extern VS_INT8 *Star_SRPI_UuidToString(void *c_this,VS_UUID *Uuid);
extern void *Star_SRPI_GetParent(void *c_this,void *Object);
extern OBJECTATTRIBUTEINDEX Star_SRPI_GetIndex(void *c_this,void *Object);
extern VS_UINT16 Star_SRPI_GetOrder(void *c_this,void *Object);
extern void *Star_SRPI_GetClass(void *c_this,void *Object);
extern void Star_SRPI_GetClassID(void *c_this,void *Object,VS_UUID *UuidPtr);
extern void Star_SRPI_GetID(void *c_this,void *Object,VS_UUID *UuidPtr);
extern void *Star_SRPI_GetObject(void *c_this,VS_UUID *ObjectID);
extern void *Star_SRPI_GetObjectEx(void *c_this,void *ParentObject,const VS_CHAR *Name);
extern void *Star_SRPI_GetObjectEx2(void *c_this,const VS_CHAR *ServiceName,const VS_CHAR *Name);
extern void *Star_SRPI_GetSRPObject(void *c_this,VS_UUID *ObjectID);
extern void *Star_SRPI_GetSRPObjectEx(void *c_this,void *ParentObject,const VS_CHAR *Name);
extern void *Star_SRPI_GetPrevEx(void *c_this,void *Object);
extern void *Star_SRPI_GetNextEx(void *c_this,void *Object);
extern void *Star_SRPI_QueryFirst(void *c_this,void *VSObject);
extern void *Star_SRPI_QueryFirstChild(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex);
extern void *Star_SRPI_QueryNext(void *c_this,void *Object);
extern void *Star_SRPI_QueryPrev(void *c_this,void *Object);
extern void *Star_SRPI_QueryFirstEx(void *c_this,VS_QUERYRECORD *QueryRecord);
extern void *Star_SRPI_QueryNextEx(void *c_this,VS_QUERYRECORD *QueryRecord);
extern VS_BOOL Star_SRPI_IsObject(void *c_this,void *Object);
extern void *Star_SRPI_QueryFirstActiveChild(void *c_this,void *Object,VS_UWORD *Context);
extern void *Star_SRPI_QueryNextActiveChild(void *c_this,VS_UWORD *Context);
extern VS_BOOL Star_SRPI_IsObjectInActiveSet(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_GetWebServiceFlag(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_SetWebServiceFlag(void *c_this,void *Object,VS_BOOL WebServiceFlag);
extern void *Star_SRPI_QueryFirstInst(void *c_this,VS_QUERYRECORD *QueryRecord,void *ClassObject);
extern void *Star_SRPI_QueryNextInst(void *c_this,VS_QUERYRECORD *QueryRecord,void *ClassObject);
extern void *Star_SRPI_QueryFirstInstEx(void *c_this,VS_QUERYRECORD *QueryRecord,VS_UUID *ObjectClassID);
extern void *Star_SRPI_QueryNextInstEx(void *c_this,VS_QUERYRECORD *QueryRecord,VS_UUID *ObjectClassID);
extern void Star_SRPI_QueryInstClose(void *c_this,VS_QUERYRECORD *QueryRecord);
extern VS_CHAR *Star_SRPI_GetName(void *c_this,void *Object);
extern void Star_SRPI_SetName(void *c_this,void *Object,const VS_CHAR *Name);
extern VS_BOOL Star_SRPI_IsInst(void *c_this,VS_UUID *ObjectClassID,void *Object);
extern VS_BOOL Star_SRPI_IsDirectInst(void *c_this,VS_UUID *ObjectClassID,void *Object);
extern VS_BOOL Star_SRPI_IsChild(void *c_this,void *ParentObject,void *Object);
extern void Star_SRPI_GetObjectSysRootItemID(void *c_this,void *Object,VS_UUID *UuidPtr);
extern void *Star_SRPI_GetObjectSysRootItem(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_IsThisService(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_IsActiveServiceObject(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_IsThisClient(void *c_this,void *Object);
extern VS_ULONG Star_SRPI_GetClientID(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_ExportObjectHeader(void *c_this, void *Object, const VS_CHAR *FileName );
extern void Star_SRPI_SetSaveFlag(void *c_this,void *Object,VS_UINT8 SaveFlag);
extern VS_UINT8 Star_SRPI_GetSaveFlag(void *c_this,void *Object);
extern VS_INT8 *Star_SRPI_SaveToBuf(void *c_this, void *Object, VS_INT32 *ObjectSize, const VS_CHAR *Password, VS_UINT8 SaveFlag, VS_BOOL SaveNameValue );
extern VS_BOOL Star_SRPI_SaveToFile(void *c_this, void *Object, const VS_CHAR *FileName, const VS_CHAR *Password, VS_UINT8 SaveFlag, VS_BOOL SaveNameValue );
extern VS_BOOL Star_SRPI_LoadFromBuf(void *c_this, void *Object, const VS_INT8 *Buf, VS_INT32 BufSize, const VS_CHAR *Password, VS_BOOL LoadAsLocal,VS_BOOL LoadNameValue,VS_BOOL UpdateFlag );
extern void Star_SRPI_DeferLoadFromBuf(void *c_this, void *Object, const VS_INT8 *Buf, VS_INT32 BufSize, const VS_CHAR *Password, VS_BOOL LoadAsLocal,VS_BOOL LoadNameValue,VS_BOOL UpdateFlag );
extern VS_BOOL Star_SRPI_LoadFromFile(void *c_this, void *Object, const VS_CHAR *FileName, const VS_CHAR *Password, VS_BOOL LoadAsLocal,VS_BOOL LoadNameValue,VS_BOOL UpdateFlag, VS_BOOL StaticDataUseFile );
extern void Star_SRPI_DeferLoadFromFile(void *c_this, void *Object, const VS_CHAR *FileName, const VS_CHAR *Password, VS_BOOL LoadAsLocal,VS_BOOL LoadNameValue,VS_BOOL UpdateFlag, VS_BOOL StaticDataUseFile );
extern void Star_SRPI_ResetLoad(void *c_this, void *Object );
extern void Star_SRPI_RegLoadMapAttrNameProc(void *c_this, VS_LoadMapAttrNameProc LoadMapAttrNameProc );
extern VS_BOOL Star_SRPI_IsLocalControl(void *c_this, void *Object );
extern VS_BOOL Star_SRPI_IsRemoteCreate(void *c_this, void *Object );
extern void Star_SRPI_SetIDInParent(void *c_this, void *Object,VS_UINT16 IDInParent );
extern VS_UINT16 Star_SRPI_GetIDInParent(void *c_this, void *Object );
extern void *Star_SRPI_GetChildByID(void *c_this, void *Object,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UINT16 IDInParent );
extern VS_BOOL Star_SRPI_GetFunctionID(void *c_this,void *Object,const VS_CHAR *FuntionName,VS_UUID *FunctionID);
extern VS_BOOL Star_SRPI_GetInEventID(void *c_this,void *Object,const VS_CHAR *InEventName,VS_UUID *InEventID);
extern VS_BOOL Star_SRPI_GetOutEventID(void *c_this,void *Object,const VS_CHAR *OutEventName,VS_UUID *OutEventID);
extern VS_CHAR *Star_SRPI_GetOutEventName(void *c_this,VS_UUID *OutEventID);
extern void *Star_SRPI_GetFunction(void *c_this,VS_UUID *FunctionID,VS_BOOL *GlobalFunctionFlag);
extern void *Star_SRPI_GetFunctionEx(void *c_this,void *Object,VS_UUID *FunctionID,VS_BOOL *GlobalFunctionFlag);
extern void *Star_SRPI_GetOriFunction(void *c_this,VS_UUID *FunctionID,VS_BOOL *GlobalFunctionFlag);
extern void Star_SRPI_SetFunction(void *c_this,VS_UUID *FunctionID,void *FuncAddress);
extern void Star_SRPI_SetInEvent(void *c_this,VS_UUID *InEventID,void *InEventAddress);
extern void *Star_SRPI_GetSysEvent(void *c_this,void *Object, VS_UWORD *Para);
extern void Star_SRPI_SetSysEvent(void *c_this,void *Object,void *SysEventAddress, VS_UWORD Para);
extern void Star_SRPI_SetSysEventMask(void *c_this,void *Object,VS_ULONG EventMask, VSSystemEvent_EventProc EventProc);
extern VS_ULONG Star_SRPI_GetSysEventMask(void *c_this,void *Object, VSSystemEvent_EventProc EventProc );
extern void Star_SRPI_SetChildEventMask(void *c_this,void *Object,VS_ULONG ClassLayer,VS_ULONG EventMask );
extern VS_ULONG Star_SRPI_GetChildEventMask(void *c_this,void *Object,VS_ULONG ClassLayer );
extern VS_BOOL Star_SRPI_CreateOVLFunction(void *c_this,void *Object,VS_UUID *OriginFunctionID,void *FuncAddress,VS_UUID *NewFunctionID);
extern VS_BOOL Star_SRPI_CreateOVLInEvent(void *c_this,void *Object,VS_UUID *OutEventID,void *InEventAddress,VS_UUID *NewInEventID);
extern VS_ULONG Star_SRPI_EventIDToDWORD(void *c_this,VS_UUID *OutEventID);
extern VS_ULONG Star_SRPI_EventNameToDWORD(void *c_this,VS_UUID *OutEventID);
extern VS_BOOL Star_SRPI_CreateNameScript(void *c_this, void *Object, const VS_CHAR *ScriptName,const VS_CHAR *ScriptBuf );
extern VS_BOOL Star_SRPI_CreateNameScriptEx(void *c_this, void *Object, const VS_CHAR *ScriptName,const VS_CHAR *FileName );
extern void Star_SRPI_DeleteNameScript(void *c_this, void *Object, const VS_CHAR *ScriptName );
extern void Star_SRPI_ChangeScriptName(void *c_this, void *Object, const VS_CHAR *ScriptName, const VS_CHAR *NewScriptName);
extern VS_CHAR *Star_SRPI_GetNameScript(void *c_this, void *Object, const VS_CHAR *ScriptName);
extern VS_CHAR *Star_SRPI_QueryFirstNameScript(void *c_this, void *Object,VS_CHAR **ScriptPtr );
extern VS_CHAR *Star_SRPI_QueryNextNameScript(void *c_this, VS_CHAR **ScriptPtr );
extern VS_BOOL Star_SRPI_ExecNameScript(void *c_this, void *Object, const VS_CHAR *ScriptName, VS_INT32 nArgs,VS_INT32 nOutArgs );
extern VS_BOOL Star_SRPI_ExecNameScriptEx(void *c_this, void *Object, const VS_CHAR *ScriptName, VS_INT32 nArgs,VS_INT32 nOutArgs );
extern VS_BOOL Star_SRPI_ExecScript(void *c_this,void *Object,const VS_CHAR *FuncName,const VS_INT8 *ScriptBuf,VS_INT32 ScriptBufSize,VS_INT32 nArgs,VS_INT32 nOutArgs);
extern VS_BOOL Star_SRPI_ExecScriptEx(void *c_this,void *Object,const VS_CHAR *FuncName,const VS_CHAR *FileName,VS_INT32 nArgs,VS_INT32 nOutArgs);
extern void Star_SRPI_ForceReCompile(void *c_this, void *Object, const VS_CHAR *ScriptName );
extern void Star_SRPI_RegCompileFunc(void *c_this, VSModuleFunction_ScriptCompileHookProc HookProc,VS_UWORD Para);
/*extern void Star_SRPI_RemoteCall(void *c_this,VS_ULONG ClientID,void *Object,VS_UUID *FunctionID,...); */
/*extern void Star_SRPI_RemoteCallVar(void *c_this,VS_ULONG ClientID,void *Object,VS_UUID *FunctionID,va_list argList); */
/*extern void Star_SRPI_RemoteCallEx(void *c_this,VS_ULONG ExcludeClientID,void *Object,VS_UUID *FunctionID,...); */
/*extern void Star_SRPI_RemoteCallExVar(void *c_this,VS_ULONG ExcludeClientID,void *Object,VS_UUID *FunctionID,va_list argList); */
extern VS_ULONG Star_SRPI_GetRemoteID(void *c_this,void *Object);
extern VS_ULONG Star_SRPI_GetRemoteCallID(void *c_this,void *Object);
extern VS_UINT16 Star_SRPI_GetRemoteSourceTag(void *c_this,void *Object);
extern void *Star_SRPI_GetRemoteAttach(void *c_this,void *Object);
extern VS_CHAR *Star_SRPI_GetRemoteCallName(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_IsRemoteCall(void *c_this,void *Object);
/*extern VS_UWORD Star_SRPI_SRemoteCall(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object,VS_UUID *FunctionID,...); */
/*extern VS_UWORD Star_SRPI_SRemoteCallVar(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object,VS_UUID *FunctionID,va_list argList); */
/*extern VS_BOOL Star_SRPI_ARemoteCall(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_RemoteCallResponseProc CallBackProc,VS_UWORD Para,void *Object,VS_UUID *FunctionID,...); */
/*extern VS_BOOL Star_SRPI_ARemoteCallVar(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_RemoteCallResponseProc CallBackProc,VS_UWORD Para,void *Object,VS_UUID *FunctionID,va_list argList); */
extern void Star_SRPI_SetDeferRspFlag(void *c_this,void *Object);
extern void Star_SRPI_SetRetCode(void *c_this,void *Object,VS_ULONG RemoteRetCode);
extern void Star_SRPI_SetRemoteRspAttach(void *c_this,void *Object,void *RemoteAttach);
extern void Star_SRPI_RemoteCallRsp(void *c_this,void *Object,VS_ULONG ClientID,VS_ULONG RemoteCallID,const VS_CHAR *RemoteCallName,VS_UINT16 RemoteSourceTag,VS_ULONG RetCode,VS_UINT8 RetType,VS_UWORD RetValue, void *RemoteAttach);
extern VS_BOOL Star_SRPI_FillSoapRspHeader(void *c_this,void *SXMLInterface);
extern void Star_SRPI_SetPrivateTag(void *c_this,VS_ULONG ClientPrivateTag);
extern VS_ULONG Star_SRPI_GetRemotePrivateTag(void *c_this,void *Object);
extern VS_ULONG Star_SRPI_GetLayer(void *c_this, void *Object );
extern void Star_SRPI_SetPrivateValue(void *c_this, void *Object,VS_ULONG ClassLayer,VS_ULONG Index, VS_UWORD Value  );
extern VS_BOOL Star_SRPI_GetPrivateValue(void *c_this, void *Object,VS_ULONG ClassLayer,VS_ULONG Index, VS_UWORD *Value, VS_UWORD DefaultValue  );
extern void *Star_SRPI_MallocPrivateBuf(void *c_this, void *Object,VS_ULONG ClassLayer,VS_ULONG Index, VS_INT32 BufSize  );
extern void *Star_SRPI_GetPrivateBuf(void *c_this, void *Object,VS_ULONG ClassLayer,VS_ULONG Index, VS_INT32 *BufSize  );
extern void Star_SRPI_FreePrivate(void *c_this, void *Object,VS_ULONG ClassLayer,VS_ULONG Index );
extern VS_BOOL Star_SRPI_SetNameIntValue(void *c_this, void *Object,const VS_CHAR *Name, VS_INT32 Value, VS_BOOL LocalChange  );
extern VS_BOOL Star_SRPI_GetNameIntValue(void *c_this, void *Object,const VS_CHAR *Name, VS_INT32 *Value, VS_INT32 DefaultValue  );
extern VS_BOOL Star_SRPI_SetNameFloatValue(void *c_this, void *Object,const VS_CHAR *Name, VS_DOUBLE Value, VS_BOOL LocalChange  );
extern VS_BOOL Star_SRPI_GetNameFloatValue(void *c_this, void *Object,const VS_CHAR *Name, VS_DOUBLE *Value, VS_DOUBLE DefaultValue  );
extern VS_BOOL Star_SRPI_SetNameBinValue(void *c_this, void *Object,const VS_CHAR *Name, VS_INT8 *Value, VS_UINT16 ValueSize, VS_BOOL LocalChange  );
extern VS_INT8 *Star_SRPI_GetNameBinValue(void *c_this, void *Object,const VS_CHAR *Name, VS_UINT16 *ValueSize );
extern VS_BOOL Star_SRPI_SetNameStrValue(void *c_this, void *Object,const VS_CHAR *Name, const VS_CHAR *Value, VS_BOOL LocalChange  );
extern VS_CHAR *Star_SRPI_GetNameStrValue(void *c_this, void *Object,const VS_CHAR *Name, const VS_CHAR *DefaultValue  );
extern VS_BOOL Star_SRPI_SetNameTimeValue(void *c_this, void *Object,const VS_CHAR *Name, VS_TIME *Value, VS_BOOL LocalChange  );
extern VS_BOOL Star_SRPI_GetNameTimeValue(void *c_this, void *Object,const VS_CHAR *Name, VS_TIME *Value, VS_TIME *DefaultValue  );
extern void Star_SRPI_FreeNameValue(void *c_this, void *Object,const VS_CHAR *Name );
extern void Star_SRPI_FreeAllNameValue(void *c_this, void *Object );
extern VS_UINT8 Star_SRPI_GetNameValueType(void *c_this, void *Object,const VS_CHAR *Name );
extern VS_CHAR *Star_SRPI_QueryFirstNameValue(void *c_this,void *Object, VS_UWORD *Context, VS_UINT8 *Type );
extern VS_CHAR *Star_SRPI_QueryNextNameValue(void *c_this,void *Object, VS_UWORD *Context, VS_UINT8 *Type );
extern VS_BOOL Star_SRPI_RegNameValueChangeCallBack(void *c_this,void *Object,VS_ObjectNameValueChangeNotifyProc ObjectNameValueChangeNotifyProc,VS_UWORD Para);
extern void Star_SRPI_UnRegNameValueChangeCallBack(void *c_this,void *Object,VS_ObjectNameValueChangeNotifyProc ObjectNameValueChangeNotifyProc,VS_UWORD Para);
extern VS_UINT8 Star_SRPI_GetSyncStatus(void *c_this, void *Object);
extern VS_UINT8 Star_SRPI_GetSyncGroupStatus(void *c_this, VS_UUID *SysRootItemID,VS_SYNCGROUP GroupIndex );
extern VS_UINT8 Star_SRPI_GetSyncGroupStatusEx(void *c_this, VS_CHAR *SysRootItemName,VS_SYNCGROUP GroupIndex );
extern void Star_SRPI_SetSyncGroup(void *c_this,void *Object,VS_SYNCGROUP GroupIndex);
extern void Star_SRPI_GetSyncGroup(void *c_this,void *Object,VS_SYNCGROUP *GroupIndex);
extern void *Star_SRPI_GetActiveService(void *c_this);
extern void *Star_SRPI_GetService(void *c_this);
extern VS_INT32 Star_SRPI_GetActiveServicePath(void *c_this,VS_INT8 *Buf,VS_INT32 BufSize);
extern VS_CHAR *Star_SRPI_GetActiveServiceName(void *c_this);
extern VS_INT32 Star_SRPI_GetServicePath(void *c_this,VS_INT8 *Buf,VS_INT32 BufSize);
extern VS_CHAR *Star_SRPI_GetServiceName(void *c_this);
extern VS_INT32 Star_SRPI_GetServiceInterval(void *c_this);
extern void Star_SRPI_GetServiceID(void *c_this,VS_UUID *UuidPtr);
extern void Star_SRPI_StartVSService(void *c_this,VS_UUID *ServiceID);
extern void Star_SRPI_ExitVSService(void *c_this);
extern void Star_SRPI_SaveService(void *c_this,const VS_CHAR *Path);
extern VS_BOOL Star_SRPI_IsServiceChange(void *c_this);
extern VS_BOOL Star_SRPI_IsServiceActive(void *c_this);
extern void Star_SRPI_GetServiceInfo(void *c_this,VS_SERVICEINFO *ServiceInfo);
extern VS_BOOL Star_SRPI_QueryFirstDepend(void *c_this, VS_QUERYRECORD *QueryRecord,VS_UUID *ServiceID,VS_UUID *RetUuid,VS_CHAR **RetServiceName );
extern VS_BOOL Star_SRPI_QueryNextDepend(void *c_this, VS_QUERYRECORD *QueryRecord,VS_UUID *RetUuid,VS_CHAR **RetServiceName );
extern VS_BOOL Star_SRPI_IsOsSupport(void *c_this, VS_UINT16 ProgramRunType, VS_UINT32 OsType );
extern VS_UWORD Star_SRPI_GetFrameTicket(void *c_this);
extern VS_BOOL Star_SRPI_ExportModule(void *c_this, const VS_CHAR *XmlCfgFile, VS_CHAR **ErrorInfo );
extern VS_ULONG Star_SRPI_GetServiceGroupID(void *c_this);
/*extern void Star_SRPI_Print(void *c_this,const VS_CHAR *format,...); */
/*extern void Star_SRPI_PrintVar(void *c_this,const VS_CHAR *format,va_list argList); */
/*extern void Star_SRPI_PrintLua(void *c_this,const VS_CHAR *format,...); */
/*extern void Star_SRPI_PrintLuaVar(void *c_this,const VS_CHAR *format,va_list argList); */
extern void Star_SRPI_SetPrintToLua(void *c_this,VS_BOOL PrintFlag);
/*extern void Star_SRPI_MessageBox(void *c_this,const VS_CHAR *Caption,const VS_CHAR *format,...); */
/*extern void Star_SRPI_MessageBoxVar(void *c_this,const VS_CHAR *Caption,const VS_CHAR *format,va_list argList); */
extern void Star_SRPI_RegMessageBoxFunction(void *c_this,void *Object,VS_MessageBoxProc MessageBoxProc);
extern void Star_SRPI_UnRegMessageBoxFunction(void *c_this,void *Object,VS_MessageBoxProc MessageBoxProc);
/*extern void Star_SRPI_ProcessError(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,...); */
/*extern void Star_SRPI_ProcessErrorVar(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,va_list argList); */
/*extern void Star_SRPI_ProcessLuaError(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,...); */
/*extern void Star_SRPI_ProcessLuaErrorVar(void *c_this,VS_INT32 AlarmLevel,const VS_CHAR *SourceName,VS_INT32 LineIndex,const VS_CHAR *format,va_list argList); */
extern VS_BOOL Star_SRPI_IsBeingTrace(void *c_this,void *Object);
/*extern void Star_SRPI_Trace(void *c_this,const VS_INT8 *SourceName,VS_INT32 BinaryBufSize,VS_INT8 *BinaryBuf,const VS_CHAR *format,...); */
/*extern void Star_SRPI_TraceVar(void *c_this,const VS_INT8 *SourceName,VS_INT32 BinaryBufSize,VS_INT8 *BinaryBuf,const VS_CHAR *format,va_list argList); */
extern void Star_SRPI_CaptureLuaDisp(void *c_this,VS_LuaInfoDispProc DispProc,VS_UWORD Para);
extern void Star_SRPI_ReleaseLuaDisp(void *c_this,VS_LuaInfoDispProc DispProc,VS_UWORD Para);
extern void Star_SRPI_InsertToSDT(void *c_this,void *Object);
extern void Star_SRPI_DelFromSDT(void *c_this,void *Object);
extern void *Star_SRPI_QueryFirstFromSDT(void *c_this,VS_QUERYRECORD *QueryRecord);
extern void *Star_SRPI_QueryNextFromSDT(void *c_this,VS_QUERYRECORD *QueryRecord);
extern void *Star_SRPI_QueryFirstInstFromSDT(void *c_this,VS_QUERYRECORD *QueryRecord,VS_UUID *ObjectClassID);
extern void *Star_SRPI_QueryNextInstFromSDT(void *c_this,VS_QUERYRECORD *QueryRecord,VS_UUID *ObjectClassID);
extern void *Star_SRPI_MallocStaticObject(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_INT32 AttachBufSize,void *AttachBuf);
extern void *Star_SRPI_MallocStaticObjectEx(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_INT32 AttachBufSize,void *AttachBuf);
extern void *Star_SRPI_MallocGlobalObject(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_INT32 AttachBufSize,void *AttachBuf,VS_ULONG ClientID);
extern void *Star_SRPI_MallocGlobalObjectEx(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_INT32 AttachBufSize,void *AttachBuf,VS_ULONG ClientID);
extern void *Star_SRPI_MallocObject(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_INT32 AttachBufSize,void *AttachBuf);
extern void *Star_SRPI_MallocObjectEx(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_INT32 AttachBufSize,void *AttachBuf);
extern void *Star_SRPI_MallocObjectL(void *c_this,VS_UUID *ObjectClassID,VS_INT32 AttachBufSize,void *AttachBuf);
extern void *Star_SRPI_MallocObjectLEx(void *c_this,VS_UUID *ObjectID,VS_UUID *ObjectClassID,VS_INT32 AttachBufSize,void *AttachBuf);
extern void *Star_SRPI_MallocClientObject(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_INT32 AttachBufSize,void *AttachBuf,VS_ULONG ClientID);
extern void *Star_SRPI_MallocClientObjectEx(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_INT32 AttachBufSize,void *AttachBuf,VS_ULONG ClientID);
extern VS_BOOL Star_SRPI_WaitMalloc(void *c_this,void *Object);
extern VS_ULONG Star_SRPI_GetOPPermission(void *c_this);
extern VS_BOOL Star_SRPI_CopyObject(void *c_this,void *Object,void *SrcObject);
extern void Star_SRPI_FreeObject(void *c_this,void *Object);
extern void Star_SRPI_DeferFreeObject(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_IsObjectInFree(void *c_this,void *Object);
extern void Star_SRPI_ChangeLocal(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex,const VS_INT8 *NewValue);
extern void Star_SRPI_ChangeObject(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex,const VS_INT8 *NewValue);
extern void Star_SRPI_ChangeParent(void *c_this,void *Object,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex);
extern void Star_SRPI_MarkChange(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex);
extern VS_BOOL Star_SRPI_RegBeforeChangeCallBack(void *c_this,void *Object,VS_ObjectBeforeChangeNotifyProc ObjectBeforeChangeNotifyProc,VS_UWORD Para,VS_BOOL ChildNotify);
extern VS_BOOL Star_SRPI_RegChangeCallBack(void *c_this,void *Object,VS_ObjectChangeNotifyProc ObjectChangeNotifyProc,VS_UWORD Para,VS_BOOL ChildNotify);
extern VS_BOOL Star_SRPI_RegReMallocCallBack(void *c_this,void *Object,VS_ObjectReMallocNotifyProc ObjectReMallocNotifyProc,VS_UWORD Para);
extern void Star_SRPI_UnRegBeforeChangeCallBack(void *c_this,void *Object,VS_ObjectBeforeChangeNotifyProc ObjectBeforeChangeNotifyProc,VS_UWORD Para);
extern void Star_SRPI_UnRegChangeCallBack(void *c_this,void *Object,VS_ObjectChangeNotifyProc ObjectChangeNotifyProc,VS_UWORD Para);
extern void Star_SRPI_UnRegReMallocCallBack(void *c_this,void *Object,VS_ObjectReMallocNotifyProc ObjectReMallocNotifyProc,VS_UWORD Para);
extern VS_BOOL Star_SRPI_RegObjectIDChangeNotify(void *c_this,VS_ObjectIDChangeNotifyProc ChangeNotifyProc,VS_UWORD Para);
extern void Star_SRPI_UnRegObjectIDChangeNotify(void *c_this,VS_ObjectIDChangeNotifyProc ChangeNotifyProc,VS_UWORD Para);
extern VS_BOOL Star_SRPI_RegObjectFreeNotify(void *c_this,VS_ObjectFreeNotifyProc FreeNotifyProc,VS_UWORD Para);
extern void Star_SRPI_UnRegObjectFreeNotify(void *c_this,VS_ObjectFreeNotifyProc FreeNotifyProc,VS_UWORD Para);
extern void Star_SRPI_DupVString(void *c_this,VS_VSTRING *InVString,VS_VSTRING *OutVString);
extern VS_ULONG Star_SRPI_GetVStringBufSize(void *c_this,VS_VSTRING *VString);
extern void Star_SRPI_ExpandVStringBufSize(void *c_this,VS_VSTRING *VString,VS_ULONG Size);
extern VS_ULONG Star_SRPI_GetAllocType(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_CreateUser(void *c_this,const VS_CHAR *In_UserName,const VS_CHAR *UserPass,VS_UINT8 ReadWriteOrExecute);
extern void Star_SRPI_DeleteUser(void *c_this,const VS_CHAR *In_UserName);
extern VS_CHAR *Star_SRPI_QueryFirstUser(void *c_this,VS_QUERYRECORD *QueryRecord,VS_UINT8 *ReadWriteOrExecute );
extern VS_CHAR *Star_SRPI_QueryNextUser(void *c_this,VS_QUERYRECORD *QueryRecord,VS_UINT8 *ReadWriteOrExecute );
extern void Star_SRPI_SetAppClass(void *c_this,void *Object,VS_ULONG ClassLayer,void *SRPObjectClass);
extern void *Star_SRPI_GetAppClass(void *c_this,void *Object,VS_ULONG ClassLayer);
extern VS_INT32 Star_SRPI_GetAttributeNumber(void *c_this,void *Object);
extern VS_INT32 Star_SRPI_GetAttributeSize(void *c_this,void *Object);
extern VS_CHAR *Star_SRPI_GetAttributeName(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex);
extern VS_BOOL Star_SRPI_GetAttributeInfo(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex,VS_ATTRIBUTEINFO *AttributeInfo);
extern VS_BOOL Star_SRPI_GetAttributeInfoEx(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_ATTRIBUTEINFO *AttributeInfo);
extern VS_INT32 Star_SRPI_GetAttachAttributeNumber(void *c_this,void *Object);
extern VS_INT32 Star_SRPI_GetAttachAttributeSize(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_GetAttachAttributeInfo(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex,VS_ATTRIBUTEINFO *AttributeInfo);
extern VS_BOOL Star_SRPI_GetComboBoxItem(void *c_this,VS_UINT8 *ComboBoxID, VS_COMBOBOXITEM *ComboBoxItemBuf);
extern VS_INT32 Star_SRPI_GetFunctionNumber(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_GetFunctionInfo(void *c_this,void *Object,VS_INT32 FunctionIndex,VS_FUNCTIONINFO *FunctionInfo);
extern VS_INT32 Star_SRPI_GetOutEventNumber(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_GetOutEventInfo(void *c_this,void *Object,VS_INT32 OutEventIndex,VS_OUTEVENTINFO *OutEventInfo);
extern void *Star_SRPI_CreateIndex_Nor(void *c_this,VS_INT32 KeyNumber,VS_UINT16 HashTableBits);
extern void *Star_SRPI_CreateIndexCmp_Nor(void *c_this,VS_INT32 KeyNumber,VS_UINT16 HashTableBits,VS_IndexCompareProc CompareProc);
extern void *Star_SRPI_CreateIDIndex_Nor(void *c_this,VS_UINT16 HashTableBits);
extern void *Star_SRPI_CreateIDIndexEx_Nor(void *c_this,VS_UINT16 HashTableBits);
extern void *Star_SRPI_CreateIndex_Dbg(void *c_this,VS_INT32 KeyNumber,VS_UINT16 HashTableBits,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void *Star_SRPI_CreateIndexCmp_Dbg(void *c_this,VS_INT32 KeyNumber,VS_UINT16 HashTableBits,VS_IndexCompareProc CompareProc,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void *Star_SRPI_CreateIDIndex_Dbg(void *c_this,VS_UINT16 HashTableBits,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void *Star_SRPI_CreateIDIndexEx_Dbg(void *c_this,VS_UINT16 HashTableBits,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void Star_SRPI_InsertOneKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_INT8 *Buf);
extern VS_INT8 *Star_SRPI_FindOneKey(void *c_this,void *IndexContext,VS_UWORD MainKey);
extern VS_INT8 *Star_SRPI_DelOneKey(void *c_this,void *IndexContext,VS_UWORD MainKey);
extern VS_INT8 *Star_SRPI_QueryFirstOneKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey);
extern VS_INT8 *Star_SRPI_QueryNextOneKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey);
extern VS_INT8 *Star_SRPI_QueryFirstOneKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey);
extern VS_INT8 *Star_SRPI_QueryNextOneKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey);
extern void Star_SRPI_InsertTwoKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey,VS_INT8 *Buf);
extern VS_INT8 *Star_SRPI_FindTwoKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey);
extern VS_INT8 *Star_SRPI_DelTwoKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey);
extern VS_INT8 *Star_SRPI_QueryFirstTwoKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPI_QueryNextTwoKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPI_QueryFirstTwoKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPI_QueryNextTwoKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPI_QueryFirstTwoKey_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPI_QueryNextTwoKey_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPI_QueryFirstTwoKeyA_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey);
extern VS_INT8 *Star_SRPI_QueryNextTwoKeyA_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey);
extern void Star_SRPI_InsertThreeKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD ThirdKey,VS_INT8 *Buf);
extern VS_INT8 *Star_SRPI_FindThreeKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD ThirdKey);
extern VS_INT8 *Star_SRPI_DelThreeKey(void *c_this,void *IndexContext,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD ThirdKey);
extern VS_INT8 *Star_SRPI_QueryFirstThreeKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryNextThreeKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryFirstThreeKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryNextThreeKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD *MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryFirstThreeKey_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryNextThreeKey_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryFirstThreeKeyA_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryNextThreeKeyA_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD *SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryFirstThreeKey_S(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryNextThreeKey_S(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryFirstThreeKeyA_S(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD *ThirdKey);
extern VS_INT8 *Star_SRPI_QueryNextThreeKeyA_S(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UWORD MainKey,VS_UWORD SecondKey,VS_UWORD *ThirdKey);
extern void Star_SRPI_InsertIDKey(void *c_this,void *IndexContext,VS_UUID *UuidKey,VS_INT8 *Buf );
extern VS_INT8 *Star_SRPI_FindIDKey(void *c_this,void *IndexContext,VS_UUID *UuidKey);
extern VS_INT8 *Star_SRPI_DelIDKey(void *c_this,void *IndexContext,VS_UUID *UuidKey);
extern VS_INT8 *Star_SRPI_QueryFirstIDKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey);
extern VS_INT8 *Star_SRPI_QueryNextIDKey(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey);
extern VS_INT8 *Star_SRPI_QueryFirstIDKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey);
extern VS_INT8 *Star_SRPI_QueryNextIDKeyA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey);
extern void Star_SRPI_InsertIDKeyEx(void *c_this,void *IndexContext,VS_UUID *UuidKey,VS_UWORD ExKey,VS_INT8 *Buf);
extern VS_INT8 *Star_SRPI_FindIDKeyEx(void *c_this,void *IndexContext,VS_UUID *UuidKey,VS_UWORD ExKey);
extern VS_INT8 *Star_SRPI_DelIDKeyEx(void *c_this,void *IndexContext,VS_UUID *UuidKey,VS_UWORD ExKey);
extern VS_INT8 *Star_SRPI_QueryFirstIDKeyEx(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT8 *Star_SRPI_QueryNextIDKeyEx(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT8 *Star_SRPI_QueryFirstIDKeyEx_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT8 *Star_SRPI_QueryNextIDKeyEx_F(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT8 *Star_SRPI_QueryFirstIDKeyExA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT8 *Star_SRPI_QueryNextIDKeyExA(void *c_this,void *IndexContext,VS_QUERYRECORD *QueryRecord,VS_UUID *UuidKey,VS_UWORD *ExKey);
extern VS_INT32 Star_SRPI_GetKeyNumber(void *c_this,void *IndexContext);
extern void Star_SRPI_DelAllKey(void *c_this,void *IndexContext);
extern void Star_SRPI_DestoryIndex(void *c_this,void *IndexContext);
extern VS_ULONG Star_SRPI_GetHashValue(void *c_this,void *Key,VS_ULONG Length,VS_ULONG InitValue);
extern void *Star_SRPI_CreateMemory_Nor(void *c_this,VS_INT32 ItemSize);
extern void *Star_SRPI_CreateMemory_Dbg(void *c_this,VS_INT32 ItemSize,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void *Star_SRPI_GetMemoryPtr_Nor(void *c_this,void *MemoryContext);
extern void *Star_SRPI_GetMemoryPtr_Dbg(void *c_this,void *MemoryContext,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void *Star_SRPI_QueryFirstMemoryPtr(void *c_this,void *MemoryContext,VS_QUERYRECORD *QueryRecord);
extern void *Star_SRPI_QueryNextMemoryPtr(void *c_this,void *MemoryContext,VS_QUERYRECORD *QueryRecord);
extern void Star_SRPI_FreeMemoryPtr(void *c_this,void *MemoryContext,void *Ptr);
extern void Star_SRPI_ClearMemory(void *c_this,void *MemoryContext);
extern void Star_SRPI_DestoryMemory(void *c_this,void *MemoryContext);
extern void *Star_SRPI_Malloc_Nor(void *c_this,VS_INT32 MemorySize);
extern void *Star_SRPI_Malloc_Dbg(void *c_this,VS_INT32 MemorySize,const VS_CHAR *FileName,VS_INT32 LineNumber);
extern void Star_SRPI_Free(void *c_this,void *MemoryPtr);
extern void Star_SRPI_GetMemoryUsed(void *c_this, VS_UWORD *KernelAllocSize,VS_UWORD *DataAllocSize,VS_UWORD *AppAllocSize, VS_UWORD *ScriptMemoryUsed );
extern void Star_SRPI_InjectSysEventFunction(void *c_this,VS_ULONG SysEventID,VSSystemEvent_EventProc ProcessFunctionProc);
extern void Star_SRPI_RejectSysEventFunction(void *c_this,VS_ULONG SysEventID,VSSystemEvent_EventProc ProcessFunctionProc);
extern VS_EVENTPARAM_RUNPARAM *Star_SRPI_GetResponseBuf(void *c_this);
extern VS_EVENTPARAM_RUNPARAM *Star_SRPI_GetRequestBuf(void *c_this);
extern VS_ULONG Star_SRPI_GetSysEventID(void *c_this,VS_EVENTPARAM *EventParam);
extern void Star_SRPI_FreeResponseBuf(void *c_this,VS_EVENTPARAM_RUNPARAM *ResponseParam);
extern void Star_SRPI_FreeRequestBuf(void *c_this,VS_EVENTPARAM_RUNPARAM *RequestParam);
extern void Star_SRPI_AttachResponseBuf(void *c_this,VS_EVENTPARAM *EventParam,VS_EVENTPARAM_RUNPARAM *ResponseParam);
extern VS_EVENTPARAM_RUNPARAM *Star_SRPI_ProcessEvent_Nor(void *c_this,VS_UUID *EventID,void *SrcObject,void *DesObject,VS_EVENTPARAM_RUNPARAM *RequestParam);
extern VS_EVENTPARAM_RUNPARAM *Star_SRPI_ProcessEvent_Dbg(void *c_this,VS_UUID *EventID,void *SrcObject,void *DesObject,VS_EVENTPARAM_RUNPARAM *RequestParam);
extern VS_EVENTPARAM_RUNPARAM *Star_SRPI_PostProcessEvent_Nor(void *c_this,VS_UUID *EventID,void *SrcObject,void *DesObject,VS_EVENTPARAM_RUNPARAM *RequestParam);
extern VS_EVENTPARAM_RUNPARAM *Star_SRPI_PostProcessEvent_Dbg(void *c_this,VS_UUID *EventID,void *SrcObject,void *DesObject,VS_EVENTPARAM_RUNPARAM *RequestParam);
extern VS_EVENTPARAM_RUNPARAM *Star_SRPI_ProcessParentEvent(void *c_this,VS_EVENTPARAM *EventParam);
extern void Star_SRPI_SetEventAttachBuf(void *c_this,VS_EVENTPARAM_RUNPARAM *RunParam);
extern VS_BOOL Star_SRPI_RegEventFunction(void *c_this,void *SrcObject,VS_UUID *EventID, void *Object, void *FuncAddr,VS_UWORD Para);
extern void Star_SRPI_UnRegEventFunction(void *c_this,void *SrcObject,VS_UUID *EventID, void *Object, void *FuncAddr,VS_UWORD Para );
extern VS_BOOL Star_SRPI_RegSysEventFunction(void *c_this,void *Object,VS_ULONG SysEventID, void *FuncAddr,VS_UWORD Para );
extern void Star_SRPI_UnRegSysEventFunction(void *c_this,void *Object,VS_ULONG SysEventID, void *FuncAddr,VS_UWORD Para );
extern VS_BOOL Star_SRPI_ActiveCmd(void *c_this,void *Object,VS_UINT8 ActiveCmd);
extern VS_UINT8 Star_SRPI_GetActiveCmd(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_ActiveClient(void *c_this,VS_ULONG ClientID,void *Object);
extern void Star_SRPI_DeactiveClient(void *c_this,VS_ULONG ClientID,void *Object);
extern VS_BOOL Star_SRPI_Active(void *c_this,void *Object);
extern void Star_SRPI_Deactive(void *c_this,void *Object);
extern void Star_SRPI_DeactiveAll(void *c_this);
extern VS_BOOL Star_SRPI_IsActive(void *c_this,void *Object);
extern void *Star_SRPI_QueryFirstActiveInst(void *c_this,VS_QUERYRECORD *QueryRecord,VS_UUID *ObjectClassID);
extern void *Star_SRPI_QueryNextActiveInst(void *c_this,VS_QUERYRECORD *QueryRecord,VS_UUID *ObjectClassID);
extern VS_BOOL Star_SRPI_SetClientObject(void *c_this,VS_ULONG ClientID,void *Object);
extern void *Star_SRPI_GetClientObject(void *c_this);
extern VS_BOOL Star_SRPI_CreateSysRootItem(void *c_this, const VS_CHAR *SystemRootItemName, const VS_CHAR *DependSysRootItem, VS_UUID *SystemRootItemID, VS_UUID *SystemRootItemIDEx );
extern void Star_SRPI_ActiveAllSysRootItem(void *c_this);
extern void Star_SRPI_ActiveSysRootItem(void *c_this, const VS_CHAR *SystemRootItemName );
extern void Star_SRPI_DeactiveSysRootItem(void *c_this,const VS_CHAR *SystemRootItemName);
extern void Star_SRPI_ActiveCSysRootItem(void *c_this, VS_ULONG ClientID,const VS_CHAR *SystemRootItemName );
extern void Star_SRPI_DeactiveCSysRootItem(void *c_this, VS_ULONG ClientID,const VS_CHAR *SystemRootItemName);
extern void *Star_SRPI_GetSysRootItem(void *c_this,const VS_CHAR *SystemRootItemName);
extern void *Star_SRPI_GetSysRootItemEx(void *c_this,VS_UUID *SystemRootItemID);
extern VS_CHAR *Star_SRPI_GetSysRootItemName(void *c_this,void  *SystemRootItem);
extern void Star_SRPI_GetSysRootItemActiveSet(void *c_this,void  *SystemRootItem,VS_ACTIVESETITEM *ActiveSetPtr);
extern void Star_SRPI_SetSysRootItemActiveSet(void *c_this,void  *SystemRootItem,VS_ACTIVESETITEM *ActiveSetItem);
extern void Star_SRPI_SetCSysRootItemActiveSet(void *c_this,VS_ULONG ClientID,void  *SystemRootItem,VS_ACTIVESETITEM *ActiveSetItem);
extern VS_CHAR *Star_SRPI_QueryFirstSysRootItem(void *c_this);
extern VS_CHAR *Star_SRPI_QueryNextSysRootItem(void *c_this);
extern void *Star_SRPI_QueryFirstGroupObject(void *c_this,void *SystemRootItem,VS_SYNCGROUP GroupIndex,VS_UWORD *QueryGroupContext);
extern void *Star_SRPI_QueryNextGroupObject(void *c_this,VS_UWORD *QueryGroupContext);
extern void *Star_SRPI_QueryFirstSysRootItemChild(void *c_this, void  *SystemRootItem );
extern VS_BOOL Star_SRPI_RegClientSysRootItemToSyncFunc(void *c_this,void  *SystemRootItem,VS_ClientSysRootItemChangeToSyncProc FuncPtr, VS_UWORD Para);
extern void Star_SRPI_UnRegClientSysRootItemToSyncFunc(void *c_this,void  *SystemRootItem,VS_ClientSysRootItemChangeToSyncProc FuncPtr, VS_UWORD Para);
extern void Star_SRPI_InitEdit(void *c_this,void *ClassObject,void *Object);
extern void Star_SRPI_TermEdit(void *c_this,void *ClassObject,void *Object);
extern VS_BOOL Star_SRPI_GetEditMode(void *c_this,void *Object);
extern void Star_SRPI_SetEditMode(void *c_this,void *Object,VS_BOOL EditFlag);
extern void Star_SRPI_EditCommit(void *c_this);
extern void Star_SRPI_EditSelect(void *c_this,void *Object);
extern void Star_SRPI_EditChange(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex,const VS_INT8 *NewValue);
extern void Star_SRPI_EditMarkChange(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex);
extern void Star_SRPI_EditSetSaveFlag(void *c_this,void *Object,VS_UINT8 SaveFlag);
extern void Star_SRPI_EditSetName(void *c_this,void *Object,const VS_CHAR *Name);
extern void Star_SRPI_FillAttachBuf(void *c_this,VS_UUID *ObjectClassID,VS_INT8 *AttachBuf,VS_INT32 AttachBufSize);
extern VS_BOOL Star_SRPI_IsEditProcExist(void *c_this,void *Object);
extern void Star_SRPI_TriggerEditProc(void *c_this,void *ClassObject,void *Object,VS_UWORD AppCode,VS_UWORD AppCode1);
extern void Star_SRPI_EditDelete(void *c_this,void *Object);
extern void *Star_SRPI_EditCreate(void *c_this,VS_UUID *ObjectClassID,VS_UUID *ParentObjectID,OBJECTATTRIBUTEINDEX AttributeIndex,VS_ULONG OrderIndex,VS_UINT8 ObjectSaveFlag,VS_INT32 AttachBufSize,void *AttachBuf);
extern void *Star_SRPI_EditCreateEx(void *c_this,VS_UUID *ObjectClassID,VS_UUID *ObjectID,VS_UUID *ParentObjectID,OBJECTATTRIBUTEINDEX AttributeIndex,VS_ULONG OrderIndex,VS_UINT8 ObjectSaveFlag,VS_INT32 AttachBufSize,void *AttachBuf);
extern void Star_SRPI_EditChangeParent(void *c_this,void *Object,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex);
extern void Star_SRPI_EditChangeSyncGroup(void *c_this,void *Object,VS_SYNCGROUP GroupIndex);
extern void Star_SRPI_EditGetClassID(void *c_this,VS_UUID *ObjectID,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *UuidPtr);
extern void Star_SRPI_EditGetInstID(void *c_this,VS_UUID *ObjectClassID,VS_UUID *UuidPtr);
extern void Star_SRPI_EditSetWndStatus(void *c_this,VS_BOOL Normal);
extern VS_BOOL Star_SRPI_EditUpdateObjectScript(void *c_this, void *Object, const VS_CHAR *ScriptName,const VS_CHAR *ScriptBuf );
extern VS_BOOL Star_SRPI_EditUpdateObjectScriptEx(void *c_this, void *Object, const VS_CHAR *ScriptName,const VS_CHAR *FileName );
extern VS_BOOL Star_SRPI_RegClientOpFunction(void *c_this,VS_ClientOperationCallBackProc ClientOperationCallBackProc,VS_UWORD Para);
extern void Star_SRPI_UnRegClientOpFunction(void *c_this,VS_ClientOperationCallBackProc ClientOperationCallBackProc,VS_UWORD Para);
extern void Star_SRPI_Redirect(void *c_this, VS_ULONG ClientID,const VS_CHAR *DesServerInterface,const VS_CHAR *DesServerName,VS_UINT16 DesServerPortNumber, void *ParaPkg,VS_RedirectCallBackProc RedirectCallBackProc,VS_UWORD Para );
extern void *Star_SRPI_GetServiceMachine(void *c_this);
extern void Star_SRPI_DelMachine(void *c_this,void *Machine);
extern VS_INT8 *Star_SRPI_GetMachineAttachBuf(void *c_this,void *Machine);
extern void Star_SRPI_SetMachineAttachBuf(void *c_this,void *Machine,VS_INT8 *AppBuf);
extern VS_ULONG Star_SRPI_GetMachineID(void *c_this,void *Machine);
extern void *Star_SRPI_FindMachine(void *c_this,VS_ULONG MachineID);
extern VS_BOOL Star_SRPI_RegClientMachineProcess(void *c_this,void *CallBackPtr,void *Object,VS_UWORD Para);
extern void Star_SRPI_UnRegClientMachineProcess(void *c_this,void *CallBackPtr,void *Object,VS_UWORD Para);
extern void Star_SRPI_ClientInitError(void *c_this,void *Machine);
extern void Star_SRPI_ClientInitOk(void *c_this,void *Machine,VS_BOOL ReSyncFlag,const VS_CHAR *TermOldScript,const VS_CHAR *InitNewScript,VS_ULONG ClientPrivateTag,VS_ULONG ClientOPPermission,VS_ULONG ClientUploadMaxSize);
extern void Star_SRPI_DeleteClient(void *c_this,void *Machine);
extern void Star_SRPI_GetClientInfo(void *c_this,void *Machine,VS_CLIENTINFO *ClientInfo);
extern VS_BOOL Star_SRPI_QueryFirstClientInfo(void *c_this,VS_CLIENTINFO *ClientInfo);
extern VS_BOOL Star_SRPI_QueryNextClientInfo(void *c_this,VS_CLIENTINFO *ClientInfo);
extern VS_INT32 Star_SRPI_GetClientNumber(void *c_this);
extern void Star_SRPI_GetClientQos(void *c_this,void *Machine,VS_CLIENTQOS *QosBuf);
extern void Star_SRPI_SetClientQos(void *c_this,void *Machine,VS_CLIENTQOS *QosBuf);
extern void Star_SRPI_GetServiceQos(void *c_this,VS_CLIENTQOS *QosBuf);
extern VS_BOOL Star_SRPI_DownLoad(void *c_this, void *AttachObject,const VS_CHAR *ServerPath,const VS_CHAR *ClientPath,const VS_CHAR *FileName, VS_FileUpDownLoadCallBackProc CallBackProc, void *Object, VS_UWORD Para );
extern VS_BOOL Star_SRPI_UpLoad(void *c_this, void *AttachObject,const VS_CHAR *ServerPath,const VS_CHAR *ClientPath,const VS_CHAR *FileName, VS_FileUpDownLoadCallBackProc CallBackProc, void *Object, VS_UWORD Para );
extern void Star_SRPI_GetFileInfo(void *c_this, VS_UPDOWNFILEINFO *InfoPtr );
extern VS_BOOL Star_SRPI_RegFileCallBack(void *c_this, VS_FileUpDownLoadCallBackProc CallBackProc, void *Object, VS_UWORD Para );
extern void Star_SRPI_UnRegFileCallBack(void *c_this, VS_FileUpDownLoadCallBackProc CallBackProc, void *Object, VS_UWORD Para );
extern VS_INT32 Star_SRPI_GetFileStatus(void *c_this, VS_CHAR *FileName, VS_UPDOWNFILEMSG *FileInfo );
extern VS_INT32 Star_SRPI_GetDataStatus(void *c_this, void *Object,VS_ULONG UniqueDataUnitID, VS_UPDOWNFILEMSG *FileInfo );
extern VS_BOOL Star_SRPI_QueryFirstDown(void *c_this, VS_QUERYRECORD *QueryRecord, VS_UPDOWNFILEMSG *FileInfo );
extern VS_BOOL Star_SRPI_QueryNextDown(void *c_this, VS_QUERYRECORD *QueryRecord, VS_UPDOWNFILEMSG *FileInfo );
extern VS_BOOL Star_SRPI_QueryFirstUp(void *c_this, VS_QUERYRECORD *QueryRecord, VS_UPDOWNFILEMSG *FileInfo );
extern VS_BOOL Star_SRPI_QueryNextUp(void *c_this, VS_QUERYRECORD *QueryRecord, VS_UPDOWNFILEMSG *FileInfo );
extern VS_INT8 *Star_SRPI_GetStaticData(void *c_this, void *Object,VS_ULONG UniqueDataUnitID,VS_STATICID *DataVersion,VS_ULONG *DataSize, VS_BOOL AutoDownLoad);
extern VS_INT8 *Star_SRPI_GetStaticDataEx(void *c_this, void *Object,VS_ULONG UniqueDataUnitID,VS_STATICID *DataVersion,VS_ULONG *DataSize, VS_BOOL AutoDownLoad,VS_CHAR *Token);
extern VS_BOOL Star_SRPI_CanSetStaticData(void *c_this,void *Object,VS_ULONG DataSize);
extern VS_BOOL Star_SRPI_SetStaticData(void *c_this, void *Object,VS_ULONG UniqueDataUnitID,VS_ULONG DataSize,VS_INT8 *DataBuf,VS_STATICID *RetDataVersion);
extern VS_BOOL Star_SRPI_SetStaticDataEx(void *c_this, void *Object,VS_ULONG UniqueDataUnitID,VS_ULONG *DataSize,VS_ULONG Offset,VS_CHAR *FileName,VS_STATICID *RetDataVersion);
extern VS_ULONG Star_SRPI_GetStaticAppCode(void *c_this, void *Object,OBJECTATTRIBUTEINDEX StaticPersistentAttributeIndex);
extern VS_BOOL Star_SRPI_WaitGetStaticData(void *c_this, void *Object,VS_ULONG UniqueDataUnitID,VS_FileUpDownLoadCallBackProc CallBackProc,VS_UWORD Para,VS_BOOL WaitFlag);
extern VS_BOOL Star_SRPI_WaitSetStaticData(void *c_this, void *Object,VS_ULONG UniqueDataUnitID,VS_FileUpDownLoadCallBackProc CallBackProc,VS_UWORD Para,VS_BOOL WaitFlag);
extern void Star_SRPI_PackStaticData(void *c_this);
extern void Star_SRPI_ForceToSaveStatic(void *c_this);
extern void Star_SRPI_ClearStatic(void *c_this,VS_UINT16 BeforeDays);
extern void Star_SRPI_GetStaticVersion(void *c_this, VS_ULONG DataSize,VS_INT8 *DataBuf,VS_STATICID *RetDataVersion);
extern VS_UINT16 Star_SRPI_GetProgramType(void *c_this);
extern VS_BOOL Star_SRPI_IsDefaultServer(void *c_this);
extern VS_BOOL Star_SRPI_IsWindowVisible(void *c_this);
extern void Star_SRPI_HideWindow(void *c_this);
extern void Star_SRPI_ShowWindow(void *c_this);
extern void Star_SRPI_SetWindowCaption(void *c_this,const VS_CHAR *Caption);
extern void Star_SRPI_ExitVSSystem(void *c_this,const VS_CHAR *ErrorInfo);
extern VS_BOOL Star_SRPI_IsAppActive(void *c_this);
extern void Star_SRPI_SetIdleActive(void *c_this,VS_BOOL CreateFlag);
extern void Star_SRPI_GetVersion(void *c_this,VS_UINT8 *MainVersion,VS_UINT8 *SubVersion,VS_UINT16 *BuildVersion);
extern void Star_SRPI_GetVersionInfo(void *c_this,VS_CHAR *InfoBuf,VS_INT32 InfoBufSize);
extern VS_HWND Star_SRPI_GetWindowHandle(void *c_this);
extern void Star_SRPI_GetWindowSize(void *c_this, VS_INT32 *Width, VS_INT32 *Height );
extern void Star_SRPI_SetColor(void *c_this, VS_COLOR Text,VS_COLOR Explane,VS_COLOR ObjName,VS_COLOR AttrType,VS_COLOR Number,VS_COLOR Error );
extern void Star_SRPI_SetBkColor(void *c_this, VS_COLOR BkColor );
extern void Star_SRPI_ShowStatusMenu(void *c_this, VS_BOOL MenuShowFlag, VS_BOOL StatusShowFlag );
extern VS_HWND Star_SRPI_GetClientWndHandle(void *c_this);
extern void Star_SRPI_GetClientWndSize(void *c_this, VS_INT32 *Width, VS_INT32 *Height );
extern void Star_SRPI_SetClientWndSize(void *c_this, VS_INT32 Width, VS_INT32 Height );
extern void Star_SRPI_SetClientWndFocus(void *c_this, VS_HWND hWnd, VS_BOOL NeedAction );
extern void Star_SRPI_ClearClientWnd(void *c_this);
extern void Star_SRPI_HideClientWnd(void *c_this);
extern void Star_SRPI_ShowClientWnd(void *c_this);
extern void Star_SRPI_SetClientBkColor(void *c_this, VS_COLOR BkColor );
extern void Star_SRPI_SetRunEnv_FromChildCallBack(void *c_this, void *Object,VS_RunEnvCallBackProc CallBack,VS_UWORD Para);
extern void Star_SRPI_SetRunEnv_FromParentCallBack(void *c_this, void *Object,VS_RunEnvCallBackProc CallBack,VS_UWORD Para);
extern void Star_SRPI_RegRunEnv_FromParentCallBack(void *c_this, void *Object, void *ParentObject, VS_RunEnvCallBackProc CallBack,VS_UWORD Para);
extern void Star_SRPI_UnRegRunEnv_FromParentCallBack(void *c_this, void *Object, void *ParentObject, VS_RunEnvCallBackProc CallBack,VS_UWORD Para);
extern VS_BOOL Star_SRPI_RunEnvToChild(void *c_this,void *Object, void *DesObject, struct StructOfVSRunEnv *RunEnvInfo);
extern VS_BOOL Star_SRPI_RunEnvToParent(void *c_this,void *Object, struct StructOfVSRunEnv *RunEnvInfo);
extern void Star_SRPI_SetMessageHook(void *c_this,VS_SRPMessageProcessHookProc HookProc);
extern void *Star_SRPI_GetMessageHook(void *c_this);
extern VS_BOOL Star_SRPI_RegLuaFunc(void *c_this, void *Object, const VS_CHAR *FuncName, void *FuncAddress, VS_UWORD Para);
extern void Star_SRPI_UnRegLuaFunc(void *c_this, void *Object, const VS_CHAR *FuncName, void *FuncAddress, VS_UWORD Para );
extern void Star_SRPI_UnRegLuaFuncEx(void *c_this, void *Object, void *FuncAddress, VS_UWORD Para );
extern void Star_SRPI_ValidRegLuaFunc(void *c_this, void *Object, const VS_CHAR *FuncName, void *FuncAddress, VS_UWORD Para );
extern void Star_SRPI_InValidRegLuaFunc(void *c_this, void *Object, const VS_CHAR *FuncName, void *FuncAddress, VS_UWORD Para );
extern VS_BOOL Star_SRPI_RegLuaGetValueFunc(void *c_this, void *Object, VS_LuaGetValueProc GetValueProc, VS_UWORD Para );
extern VS_BOOL Star_SRPI_RegLuaSetValueFunc(void *c_this, void *Object, VS_LuaSetValueProc SetValueProc, VS_UWORD Para );
extern VS_BOOL Star_SRPI_UnRegLuaGetValueFunc(void *c_this, void *Object, VS_LuaGetValueProc GetValueProc, VS_UWORD Para );
extern VS_BOOL Star_SRPI_UnRegLuaSetValueFunc(void *c_this, void *Object, VS_LuaSetValueProc SetValueProc, VS_UWORD Para );
extern void Star_SRPI_ValidLuaGetValueFunc(void *c_this, void *Object, VS_LuaGetValueProc GetValueProc, VS_UWORD Para );
extern void Star_SRPI_ValidLuaSetValueFunc(void *c_this, void *Object, VS_LuaSetValueProc SetValueProc, VS_UWORD Para );
extern void Star_SRPI_InValidLuaGetValueFunc(void *c_this, void *Object, VS_LuaGetValueProc GetValueProc, VS_UWORD Para );
extern void Star_SRPI_InValidLuaSetValueFunc(void *c_this, void *Object, VS_LuaSetValueProc SetValueProc, VS_UWORD Para );
extern void *Star_SRPI_GetLua(void *c_this);
extern VS_BOOL Star_SRPI_DoBuffer(void *c_this, const VS_CHAR *ScriptInterface,const VS_INT8 *ScriptBuf,VS_INT32 ScriptBufSize,const VS_CHAR *ModuleName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8 );
extern VS_BOOL Star_SRPI_DoFile(void *c_this, const VS_CHAR *ScriptInterface,const VS_CHAR *FileName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8 );
extern void Star_SRPI_LuaNewUserData(void *c_this, VS_INT32 Size );
extern void Star_SRPI_LuaSetUserDataGC(void *c_this, VS_LuaUserDataGCProc GCProc );
extern void *Star_SRPI_LuaToUserData(void *c_this, VS_INT32 Index );
extern void Star_SRPI_LuaNewTable(void *c_this);
extern VS_INT32 Star_SRPI_LuaGetTop(void *c_this);
extern VS_INT32 Star_SRPI_LuaNext(void *c_this, VS_INT32 Index );
extern void Star_SRPI_LuaPop(void *c_this, VS_INT32 Index );
extern void Star_SRPI_LuaPushBool(void *c_this, VS_BOOL Value );
extern void Star_SRPI_LuaPushString(void *c_this, const VS_CHAR *Value );
extern void Star_SRPI_LuaPushNumber(void *c_this, VS_DOUBLE Value );
extern void Star_SRPI_LuaPushInt(void *c_this, VS_INT32 Value );
extern void Star_SRPI_LuaPushNil(void *c_this);
extern VS_BOOL Star_SRPI_LuaPushObject(void *c_this, void *Object );
extern VS_BOOL Star_SRPI_LuaPushParaPkg(void *c_this, void *ParaPkg, VS_BOOL AutoRelease );
extern VS_BOOL Star_SRPI_LuaPushQueryRecord(void *c_this, VS_QUERYRECORD *QueryRecord, VS_BOOL AutoRelease );
extern VS_BOOL Star_SRPI_LuaPushRect(void *c_this, VS_RECT *rEct );
extern VS_BOOL Star_SRPI_LuaPushFont(void *c_this, VS_FONT *hFont );
extern VS_BOOL Star_SRPI_LuaPushTime(void *c_this, VS_TIME *hTime );
extern void Star_SRPI_LuaPushFunction(void *c_this, void *FunctionAddr );
extern void Star_SRPI_LuaPushClosure(void *c_this, void *FunctionAddr, VS_INT32 n );
extern VS_INT32 Star_SRPI_LuaUpValueIndex(void *c_this, VS_INT32 Index );
extern void Star_SRPI_LuaPushValue(void *c_this, VS_INT32 Index );
extern void Star_SRPI_LuaInsert(void *c_this, VS_INT32 Index );
extern void Star_SRPI_LuaRemove(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaPCall(void *c_this, VS_INT32 nargs, VS_INT32 nresults );
extern void Star_SRPI_LuaRCall(void *c_this,VS_ULONG ClientID,void *Object, const VS_CHAR *ScriptName, VS_INT32 nArgs);
extern void Star_SRPI_LuaRCallEx(void *c_this,VS_ULONG ExcludeClientID,void *Object, const VS_CHAR *ScriptName, VS_INT32 nArgs);
extern VS_BOOL Star_SRPI_LuaSRCall(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,void *Object, const VS_CHAR *ScriptName, VS_INT32 nArgs, VS_INT32 *OutArgs);
extern VS_BOOL Star_SRPI_LuaARCall(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,void *Object, void *CallBackProc, VS_UWORD Para, const VS_CHAR *ScriptName, VS_INT32 nArgs);
extern VS_INT32 Star_SRPI_LuaRegEvent(void *c_this,void *SrcObject,VS_UUID *EventID, void *Object, void *FuncAddr);
extern void Star_SRPI_LuaUnRegEvent(void *c_this,void *SrcObject,VS_UUID *EventID, void *Object, VS_INT32 FuncRefValue );
extern VS_BOOL Star_SRPI_LuaProcessEvent(void *c_this,void *Object,VS_UUID *EventID, VS_INT32 nArgs, VS_INT32 *OutArgs );
extern VS_BOOL Star_SRPI_LuaPostProcessEvent(void *c_this,void *Object,VS_UUID *EventID, VS_INT32 nArgs, VS_INT32 *OutArgs );
extern VS_BOOL Star_SRPI_LuaCall(void *c_this, void *Object, const VS_CHAR *ScriptName, VS_INT32 nArgs,VS_INT32 nOutArgs );
extern void Star_SRPI_LuaRegHook(void *c_this, void *FuncAddr );
extern void Star_SRPI_LuaUnRegHook(void *c_this, void *FuncAddr );
extern VS_INT32 Star_SRPI_LuaType(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaToBool(void *c_this, VS_INT32 Index );
extern VS_CHAR *Star_SRPI_LuaToString(void *c_this, VS_INT32 Index );
extern VS_DOUBLE Star_SRPI_LuaToNumber(void *c_this, VS_INT32 Index );
extern VS_INT32 Star_SRPI_LuaToInt(void *c_this, VS_INT32 Index );
extern void *Star_SRPI_LuaToObject(void *c_this, VS_INT32 Index );
extern void *Star_SRPI_LuaToParaPkg(void *c_this, VS_INT32 Index );
extern VS_QUERYRECORD *Star_SRPI_LuaToQueryRecord(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaToRect(void *c_this, VS_INT32 Index, VS_RECT *rEct );
extern VS_BOOL Star_SRPI_LuaToFont(void *c_this, VS_INT32 Index, VS_FONT *hFont );
extern VS_BOOL Star_SRPI_LuaToTime(void *c_this, VS_INT32 Index, VS_TIME *hTime );
extern VS_BOOL Star_SRPI_LuaIsBool(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsString(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsNumber(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsTable(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsNil(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsObject(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsParaPkg(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsQueryRecord(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsCFunction(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsFunction(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsFont(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsRect(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsTime(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaSetTable(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaGetTable(void *c_this, VS_INT32 Index );
extern void Star_SRPI_LuaSetGlobal(void *c_this, const VS_CHAR *Name );
extern void Star_SRPI_LuaGetGlobal(void *c_this, const VS_CHAR *Name );
extern VS_INT32 Star_SRPI_LuaSetRef(void *c_this, void *Object, VS_INT32 Index);
extern void Star_SRPI_LuaClearRef(void *c_this, void *Object, VS_INT32 LuaRefValue );
extern void Star_SRPI_LuaGetRef(void *c_this, void *Object,VS_INT32 LuaRefValue );
extern VS_INT32 Star_SRPI_LuaInsertTable2(void *c_this,VS_INT32 TableIndex);
extern void Star_SRPI_LuaRemoveTable2(void *c_this,VS_INT32 TableIndex,VS_INT32 Pos);
extern void Star_SRPI_LuaPushLString(void *c_this, const VS_CHAR *Value, VS_ULONG Len );
extern VS_BOOL Star_SRPI_LuaObjectNewTempTable(void *c_this, void *Object, const VS_CHAR *Name );
extern VS_BOOL Star_SRPI_LuaObjectIsLock(void *c_this, void *Object );
extern void Star_SRPI_LuaObjectLock(void *c_this, void *Object );
extern void Star_SRPI_LuaObjectUnLock(void *c_this, void *Object );
extern VS_BOOL Star_SRPI_GetValueFromLua(void *c_this,const VS_CHAR *String);
extern VS_BOOL Star_SRPI_LuaPushBinBuf(void *c_this, void *BinBuf, VS_BOOL AutoRelease );
extern void *Star_SRPI_LuaToBinBuf(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsBinBuf(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_DefLuaFunction(void *c_this, void *Object, const VS_CHAR *ScriptName );
extern VS_BOOL Star_SRPI_SaveToLuaFunc(void *c_this, void *Object, const VS_CHAR *LuaFileName, const VS_CHAR *FuncName );
extern VS_BOOL Star_SRPI_LuaPushSXml(void *c_this, void *SXml, VS_BOOL AutoRelease );
extern void *Star_SRPI_LuaToSXml(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsSXml(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaPushFunctionPara(void *c_this, void *FunctionPara, VS_BOOL AutoRelease );
extern void *Star_SRPI_LuaToFunctionPara(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsFunctionPara(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaPushCommInterface(void *c_this, void *CommInterface, VS_BOOL AutoRelease );
extern void *Star_SRPI_LuaToCommInterface(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsCommInterface(void *c_this, VS_INT32 Index );
extern void Star_SRPI_LuaInsertTable(void *c_this,VS_INT32 TableIndex,VS_INT32 Pos);
extern void Star_SRPI_LuaRemoveTable(void *c_this,VS_INT32 TableIndex,VS_INT32 Pos);
extern VS_INT32 Star_SRPI_LuaObjLen(void *c_this,VS_INT32 TableIndex);
extern void Star_SRPI_LuaGetTablei(void *c_this,VS_INT32 TableIndex,VS_INT32 Pos);
extern void Star_SRPI_LuaSetTablei(void *c_this,VS_INT32 TableIndex,VS_INT32 Pos);
extern void Star_SRPI_LuaInitObject(void *c_this,void *Object,const VS_CHAR *InitScript);
extern VS_CHAR *Star_SRPI_GetAttributeLuaString(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_LockGC(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_UnLockGC(void *c_this,void *Object);
extern void *Star_SRPI_GetObjectFromLua(void *c_this,const VS_CHAR *String);
extern void Star_SRPI_GCCollect(void *c_this);
extern VS_CHAR *Star_SRPI_GetRegStr(void *c_this,const VS_CHAR *SubKey,const VS_CHAR *ValueName,const VS_CHAR *DefaultValue);
extern VS_UINT32 Star_SRPI_GetRegInt(void *c_this,const VS_CHAR *SubKey,const VS_CHAR *ValueName,VS_UINT32 DefaultValue);
extern VS_ULONG Star_SRPI_SetupTimer(void *c_this,VS_INT32 Ticket,VS_TimerProc FunctionAddr,void *Object,VS_UWORD Para1,VS_UWORD Para2,VS_UWORD Para3,VS_UWORD Para4 );
extern void Star_SRPI_KillTimer(void *c_this,VS_ULONG TimerID);
extern VS_UWORD Star_SRPI_GetTickCount(void *c_this);
extern VS_INT8 *Star_SRPI_GetMD5(void *c_this,VS_INT8 *Buf,VS_INT32 BufSize);
extern VS_BOOL Star_SRPI_MD5ToUuid(void *c_this,const VS_INT8 *String,VS_UUID *Uuid);
extern VS_INT8 *Star_SRPI_UuidToMD5(void *c_this,VS_UUID *Uuid);
extern void Star_SRPI_CreateUuid(void *c_this,VS_UUID *UuidPtr);
extern void Star_SRPI_GetSRPTempPath(void *c_this,VS_ULONG BufSize,VS_CHAR *Buf);
extern VS_INT8 *Star_SRPI_StringToUtf8(void *c_this,const VS_INT8 *String);
extern VS_INT8 *Star_SRPI_Utf8ToString(void *c_this,const VS_INT8 *String);
extern void Star_SRPI_SetExceptHandler(void *c_this,VS_ExceptHandlerProc ExceptHandlerProc);
extern void Star_SRPI_SRPLock(void *c_this);
extern void Star_SRPI_SRPUnLock(void *c_this);
extern VS_BOOL Star_SRPI_Compress(void *c_this,VS_UINT8 *dest,VS_ULONG *destLen,VS_UINT8 *source,VS_ULONG sourceLen );
extern VS_BOOL Star_SRPI_UnCompress(void *c_this,VS_UINT8 *dest,VS_ULONG *destLen,VS_UINT8 *source,VS_ULONG sourceLen );
extern VS_BOOL Star_SRPI_IsSysRootItemSync(void *c_this,void  *SystemRootItem);
extern VS_BOOL Star_SRPI_WaitSysRootItemSync(void *c_this,void  *SystemRootItem);
extern void *Star_SRPI_GetAtomicService(void *c_this);
extern void *Star_SRPI_CreateAtomicSysRootItem(void *c_this, const VS_CHAR *SysRootItemName, const VS_CHAR *DependSysRootItem,VS_UUID *SystemRootItemID, VS_UUID *SystemRootItemIDEx );
extern void *Star_SRPI_GetAtomicSysRootItem(void *c_this, const VS_CHAR *SysRootItemName );
extern void *Star_SRPI_GetAtomicObject(void *c_this, VS_UUID *UuidPtr );
extern void *Star_SRPI_GetAtomicObjectEx(void *c_this, void *ParentAtomicObject, const VS_CHAR *ObjectName );
extern void *Star_SRPI_GetAtomicClass(void *c_this,void *AtomicObject);
extern void Star_SRPI_GetAtomicID(void *c_this,void *AtomicObject,VS_UUID *UuidPtr);
extern VS_CHAR *Star_SRPI_GetAtomicName(void *c_this,void *AtomicObject);
extern void *Star_SRPI_AtomicToObject(void *c_this,void *AtomicObject);
extern void *Star_SRPI_ObjectToAtomic(void *c_this,void *Object);
extern void Star_SRPI_FreeAtomicObject(void *c_this,void *Object);
extern void *Star_SRPI_CreateAtomicObjectSimple(void *c_this, const VS_CHAR *SysRootItemName,const VS_CHAR *ObjectName,const VS_CHAR *Attribute, VS_UUID *ObjectID, VS_CHAR **ErrorInfo );
extern void *Star_SRPI_CreateAtomicObjectAttributeSimple(void *c_this, void *AtomicObject,const VS_CHAR *Attribute, VS_CHAR **ErrorInfo );
extern void *Star_SRPI_CreateAtomicStructSimple(void *c_this, const VS_CHAR *StructName,const VS_CHAR *Attribute, VS_UUID *ObjectID, VS_CHAR **ErrorInfo );
extern void *Star_SRPI_CreateAtomicFunctionSimple(void *c_this, void *AtomicObject, const VS_CHAR *FunctionName,const VS_CHAR *Attribute, VS_UUID *ObjectID, VS_CHAR **ErrorInfo, VS_BOOL StdCallFlag,VS_BOOL GlobalFunctionFlag );
extern void Star_SRPI_SetAtomicFunction(void *c_this,void *AtomicFunction,void *FuncAddress);
extern void *Star_SRPI_CreateAtomicMacro(void *c_this, const VS_CHAR *MacroName, VS_UINT8 MacroType );
extern void *Star_SRPI_CreateAtomicMacroItem(void *c_this, void *MacroObject,const VS_CHAR *MacroItemName, const VS_CHAR *MacroItemValue );
extern void *Star_SRPI_CreateAtomicModule(void *c_this, const VS_CHAR *ModuleName,VS_UINT16 ModuleType,VS_UUID *ModuleID );
extern void *Star_SRPI_CreateAtomicEditModule(void *c_this, const VS_CHAR *ModuleName,VS_UUID *ModuleID );
extern void *Star_SRPI_CreateAtomicStruct(void *c_this, const VS_CHAR *StructName,const VS_CHAR *StructCaption,VS_UUID *StructID );
extern void *Star_SRPI_CreateAtomicObject(void *c_this, void *AtomicObject, OBJECTATTRIBUTEINDEX AtomicAttributeIndex, void *AtomicClassObject, const VS_CHAR *ObjectName, VS_UUID *ObjectID );
extern void *Star_SRPI_CreateAtomicAttachAttribute(void *c_this, void *AtomicObject, const VS_CHAR *AttributeName, const VS_CHAR *Caption, VS_UINT8 Type, VS_ULONG StaticID, VS_UINT8 SyncFlag,VS_UINT8 CreateFlag,VS_UINT8 NotifyFlag,VS_UINT8 EditType,VS_UINT8 EditControl,VS_UINT8 EditReadOnly,const VS_CHAR *Default,const VS_CHAR *Desc);
extern void *Star_SRPI_CreateAtomicAttribute(void *c_this, void *AtomicObject, const VS_CHAR *AttributeName, const VS_CHAR *Caption, VS_UINT8 Type, VS_ULONG StaticID, VS_UINT8 SyncFlag,VS_UINT8 CreateFlag,VS_UINT8 NotifyFlag,VS_UINT8 EditType,VS_UINT8 EditControl,VS_UINT8 EditReadOnly,const VS_CHAR *Default,const VS_CHAR *Desc );
extern void *Star_SRPI_CreateAtomicFuncRetAttribute(void *c_this, void *AtomicObject, VS_UINT8 Type,const VS_CHAR *Desc  );
extern void *Star_SRPI_CreateAtomicFuncParaAttribute(void *c_this, void *AtomicObject, const VS_CHAR *AttributeName, const VS_CHAR *AttributeCaption,VS_UINT8 Type,const VS_CHAR *Desc );
extern void *Star_SRPI_CreateAtomicStructAttribute(void *c_this, void *AtomicObject, const VS_CHAR *AttributeName, const VS_CHAR *Caption, VS_UINT8 Type,const VS_CHAR *Desc );
extern VS_BOOL Star_SRPI_SetAtomicAttributeLength(void *c_this, void *AtomicObject, VS_INT32 Length );
extern VS_BOOL Star_SRPI_SetAtomicAttributeStruct(void *c_this, void *AtomicObject, void *AtomicStruct );
extern VS_BOOL Star_SRPI_SetAtomicAttributeCombobox(void *c_this, void *AtomicObject, const VS_CHAR *MacroName );
extern VS_BOOL Star_SRPI_SetAtomicAttributeSyncFlag(void *c_this, void *AtomicObject, VS_UINT8 SyncFlag );
extern void *Star_SRPI_CreateAtomicScript(void *c_this, void *AtomicObject, const VS_CHAR *ScriptName, VS_UUID *ScriptID, const VS_CHAR *Desc, const VS_INT8 *ScriptBuf );
extern void *Star_SRPI_CreateAtomicFunction(void *c_this, void *AtomicObject, const VS_CHAR *FunctionName, VS_UUID *FunctionID, const VS_CHAR *Desc, VS_BOOL CantOvl, VS_BOOL CallBack, VS_BOOL StdCallFlag,VS_BOOL GlobalFunctionFlag );
extern void *Star_SRPI_CreateAtomicLuaFunction(void *c_this, void *AtomicObject, const VS_CHAR *LuaFunctionName, VS_UUID *LuaFunctionID, const VS_CHAR *Desc );
extern void *Star_SRPI_CreateAtomicOvlFunction(void *c_this, void *AtomicObject, const VS_CHAR *FunctionName, const VS_CHAR *OriginFunctionName, VS_UUID *OvlFunctionID, const VS_CHAR *Desc, VS_BOOL CantOvl );
extern void *Star_SRPI_CreateAtomicFunctionEx(void *c_this, void *AtomicObject, const VS_CHAR *FunctionName, VS_UUID *FunctionID, const VS_CHAR *Desc, VS_BOOL CantOvl, VS_BOOL CallBack, const VS_CHAR *Type,VS_CHAR **ErrorInfo, VS_BOOL StdCallFlag,VS_BOOL GlobalFunctionFlag );
extern void *Star_SRPI_CreateAtomicInEvent(void *c_this, void *AtomicObject, const VS_CHAR *InEventName, VS_UUID *InEventID,const VS_CHAR *OutEventName );
extern void *Star_SRPI_CreateAtomicOutEvent(void *c_this, void *AtomicObject, const VS_CHAR *OutEventName, VS_UUID *OutEventID, const VS_CHAR *Desc, VS_BOOL DynamicFlag );
extern void *Star_SRPI_GetAtomicFunction(void *c_this,VS_UUID *FunctionID);
extern void *Star_SRPI_GetAtomicFunctionEx(void *c_this,void *AtomicObject,VS_UUID *FunctionID);
extern void *Star_SRPI_GetAtomicFunctionByName(void *c_this, void *AtomicObject, const VS_CHAR *FunctionName );
extern void *Star_SRPI_GetAtomicScript(void *c_this, void *AtomicObject, const VS_CHAR *ScriptName );
extern void *Star_SRPI_GetAtomicOutEvent(void *c_this, void *AtomicObject, const VS_CHAR *OutEventName );
extern VS_BOOL Star_SRPI_GetAtomicInfo(void *c_this, void *Atomic, VS_ULONG *AtomicType,VS_UWORD *Para1, VS_UWORD *Para2, VS_UWORD *Para3, VS_UWORD *Para4, VS_UWORD *Para5, VS_UWORD *Para6, VS_UWORD *Para7 );
extern VS_BOOL Star_SRPI_GetAtomicAttributeInfo(void *c_this,void *AtomicObject,VS_INT32 AttributeIndexNumber,OBJECTATTRIBUTEINDEX *AttributeIndex,const VS_CHAR *AttributeName,VS_ATTRIBUTEINFO *AttributeInfo);
extern VS_BOOL Star_SRPI_GetAtomicAttributeInfoEx(void *c_this,void *AtomicObject,VS_INT32 AttributeIndexNumber,OBJECTATTRIBUTEINDEX *AttributeIndex,OBJECTATTRIBUTEINDEX ThisAtomicAttributeIndex,VS_ATTRIBUTEINFO *AttributeInfo);
extern VS_INT32 Star_SRPI_GetAtomicAttachAttributeNumber(void *c_this,void *AtomicObject);
extern VS_INT32 Star_SRPI_GetAtomicAttachAttributeSize(void *c_this,void *AtomicObject);
extern VS_BOOL Star_SRPI_GetAtomicAttachAttributeInfoEx(void *c_this,void *AtomicObject,OBJECTATTRIBUTEINDEX AttachAttributeIndex,VS_ATTRIBUTEINFO *AttributeInfo);
extern VS_BOOL Star_SRPI_GetAtomicAttributeLength(void *c_this, void *AtomicObject, VS_INT32 *Length );
extern void *Star_SRPI_GetAtomicAttributeStruct(void *c_this, void *AtomicObject );
extern void *Star_SRPI_GetAtomicAttributeCombobox(void *c_this, void *AtomicObject );
extern VS_UINT8 Star_SRPI_GetAtomicAttributeSyncFlag(void *c_this, void *AtomicObject );
extern OBJECTATTRIBUTEINDEX Star_SRPI_ToAttributeIndex(void *c_this,void *AtomicObject,OBJECTATTRIBUTEINDEX AtomicAttributeIndex);
extern OBJECTATTRIBUTEINDEX Star_SRPI_ToAtomicAttributeIndex(void *c_this,void *AtomicObject,OBJECTATTRIBUTEINDEX AttributeIndex);
extern VS_INT32 Star_SRPI_GetAtomicStructAttributeNumber(void *c_this,void *AtomicObject);
extern VS_INT32 Star_SRPI_GetAtomicStructAttributeSize(void *c_this,void *AtomicObject);
extern VS_BOOL Star_SRPI_GetAtomicStructAttributeInfo(void *c_this,void *AtomicObject,const VS_CHAR *AttributeName,VS_ATTRIBUTEINFO *AttributeInfo);
extern VS_BOOL Star_SRPI_GetAtomicStructAttributeInfoEx(void *c_this,void *AtomicObject,OBJECTATTRIBUTEINDEX ThisAtomicAttributeIndex,VS_ATTRIBUTEINFO *AttributeInfo);
extern VS_INT32 Star_SRPI_GetAtomicFuncRetAttributeNumber(void *c_this,void *AtomicObject);
extern VS_INT32 Star_SRPI_GetAtomicFuncParaAttributeNumber(void *c_this,void *AtomicObject);
extern void *Star_SRPI_QueryFirstAtomicMacro(void *c_this, VS_UWORD *QueryContext, VS_UUID *ServiceID, VS_CHAR **MacroName, VS_UINT8 *Type );
extern void *Star_SRPI_QueryNextAtomicMacro(void *c_this, VS_UWORD *QueryContext, VS_UUID *ServiceID, VS_CHAR **MacroName, VS_UINT8 *Type );
extern void *Star_SRPI_QueryFirstAtomicInfo(void *c_this, VS_UWORD *QueryContext, VS_UINT8 AtomicType, VS_UWORD *Para1, VS_UWORD *Para2, VS_UWORD *Para3, VS_UWORD *Para4, VS_UWORD *Para5 );
extern void *Star_SRPI_QueryNextAtomicInfo(void *c_this, VS_UWORD *QueryContext, VS_UINT8 AtomicType, VS_UWORD *Para1, VS_UWORD *Para2, VS_UWORD *Para3, VS_UWORD *Para4, VS_UWORD *Para5 );
extern VS_BOOL Star_SRPI_AtomicObjectCanOutput(void *c_this, void *AtomicObject, VS_INT32 HasOutputNumber, void **HasOutputAtomicObject );
extern VS_BOOL Star_SRPI_AtomicObjectAttributeCanOutput(void *c_this, void *AtomicObject, OBJECTATTRIBUTEINDEX AtomicAttributeIndex,VS_INT32 HasOutputNumber, void **HasOutputAtomicObject );
extern VS_BOOL Star_SRPI_SetAtomicAttribute(void *c_this,void *AtomicObject,VS_INT32 AttributeIndexNumber,OBJECTATTRIBUTEINDEX *AttributeIndex,OBJECTATTRIBUTEINDEX ThisAtomicAttributeIndex,const VS_INT8 *NewValue);
extern void *Star_SRPI_GetAtomicAttribute(void *c_this, void *AtomicObject, VS_INT32 AttributeIndexNumber,OBJECTATTRIBUTEINDEX *AttributeIndex, OBJECTATTRIBUTEINDEX ThisAtomicAttributeIndex );
extern void *Star_SRPI_GetAtomicAttributeDefault(void *c_this, void *AtomicObject, VS_INT32 AttributeIndexNumber,OBJECTATTRIBUTEINDEX *AttributeIndex, OBJECTATTRIBUTEINDEX ThisAtomicAttributeIndex );
extern VS_SYNCGROUP Star_SRPI_GetAtomicObjectSyncGroup(void *c_this, void *AtomicObject );
extern VS_BOOL Star_SRPI_SetAtomicObjectSyncGroup(void *c_this, void *AtomicObject, VS_SYNCGROUP SyncGroup );
extern VS_BOOL Star_SRPI_GetAtomicObjectAttribute(void *c_this, void *AtomicObject,VS_BOOL *SysEvent,VS_UINT8 *SpecialEvent,VS_UINT8 *ActiveCmd,VS_UINT8 *SaveFlag);
extern VS_BOOL Star_SRPI_SetAtomicObjectAttribute(void *c_this, void *AtomicObject,VS_BOOL SysEvent,VS_UINT8 SpecialEvent,VS_UINT8 ActiveCmd,VS_UINT8 SaveFlag );
extern void *Star_SRPI_CreateAtomicDepend(void *c_this, const VS_CHAR *DependServiceName, VS_UUID *DependID);
extern VS_BOOL Star_SRPI_IsValid(void *c_this);
extern VS_BOOL Star_SRPI_ProgramRestart(void *c_this);
extern VS_BOOL Star_SRPI_HttpDownLoad(void *c_this, VS_UUID *AttachObjectID, const VS_CHAR *ServerUrl,const VS_CHAR *ClientPath,const VS_CHAR *FileName, VS_FileUpDownLoadCallBackProc CallBackProc, VS_UUID *ObjectID, VS_UWORD Para, VS_BOOL SaveFileFlag );
extern void Star_SRPI_HttpDownLoadAbort(void *c_this);
extern void Star_SRPI_RegWebDownFunction(void *c_this,VS_WebDownInfoProc CallBackProc,VS_UWORD Para);
extern void Star_SRPI_UnRegWebDownFunction(void *c_this,VS_WebDownInfoProc CallBackProc,VS_UWORD Para);
extern void Star_SRPI_WebDownPrint(void *c_this,VS_ULONG uMes, const VS_CHAR *FileName, VS_UINT64 MaxLength, VS_UINT64 CurLength);
extern void Star_SRPI_RegDllCallBack(void *c_this, VS_MsgCallBackProc MsgCallBackProc, VS_UWORD MsgCallBackPara );
extern void Star_SRPI_UnRegDllCallBack(void *c_this, VS_MsgCallBackProc MsgCallBackProc, VS_UWORD MsgCallBackPara );
extern OBJECTATTRIBUTEINDEX Star_SRPI_AllocQueue(void *c_this,void *ParentObject,void *Object);
extern OBJECTATTRIBUTEINDEX Star_SRPI_AllocQueueEx(void *c_this,void *ParentObject,VS_UUID *ClassID);
extern VS_BOOL Star_SRPI_GetPeerIP(void *c_this,VS_ULONG ClientID,VSSOCKADDR_IN *ClientIP);
extern VS_ULONG Star_SRPI_GetServerID(void *c_this);
extern VS_BOOL Star_SRPI_RemoteSend(void *c_this, void *Object, VS_ULONG ClientID, void *ParaPkg );
extern void *Star_SRPI_GetSysDocClass(void *c_this);
extern void *Star_SRPI_FirstDoc(void *c_this,VS_QUERYRECORD *QueryRecord,VS_CHAR **DocName);
extern void *Star_SRPI_NextDoc(void *c_this,VS_QUERYRECORD *QueryRecord,VS_CHAR **DocName);
extern void Star_SRPI_RegisterDoc(void *c_this,void *DocObject,const VS_CHAR *DocName);
extern void Star_SRPI_UnRegisterDoc(void *c_this,void *DocObject);
extern VS_EVENTPARAM_RUNPARAM *Star_SRPI_ProcessSysDocEvent(void *c_this,VS_UUID *DocObjectID,VS_UUID *EventID,VS_EVENTPARAM_RUNPARAM *RequestParam);
extern VS_BOOL Star_SRPI_RegDocEventFunction(void *c_this,VS_UUID *DocObjectID,VS_UUID *EventID, void *FuncAddr,VS_UWORD Para);
extern void Star_SRPI_UnRegDocEventFunction(void *c_this,VS_UUID *DocObjectID,VS_UUID *EventID, void *FuncAddr,VS_UWORD Para );
extern void Star_SRPI_GetActiveServiceID(void *c_this,VS_UUID *UuidPtr);
extern void Star_SRPI_RegisterAttachClass(void *c_this,void *OriginClass,void *AttachClass);
extern void Star_SRPI_UnRegisterAttachClass(void *c_this,void *OriginClass,void *AttachClass);
extern VS_BOOL Star_SRPI_WaitEvent(void *c_this,void *SrcObject,VS_UUID *EventID, void *Object, void *FuncAddr,VS_UWORD Para,VS_BOOL AutoDelete);
extern void Star_SRPI_UnWaitEvent(void *c_this,void *SrcObject,VS_UUID *EventID, void *Object, void *FuncAddr,VS_UWORD Para);
extern VS_INT32 Star_SRPI_LuaPushEventPara(void *c_this,void *EventParam);
extern VS_BOOL Star_SRPI_RegChangeCallBackEx(void *c_this,void *Object,VS_ObjectChangeNotifyExProc ObjectChangeNotifyProc,void *DesObject,VS_UWORD Para,VS_BOOL ChildNotify);
extern void Star_SRPI_UnRegChangeCallBackEx(void *c_this,void *Object,VS_ObjectChangeNotifyExProc ObjectChangeNotifyProc,void *DesObject,VS_UWORD Para);
extern void Star_SRPI_ToClipBoard(void *c_this,const VS_CHAR *Info);
extern VS_CHAR *Star_SRPI_FromClipBoard(void *c_this);
extern VS_BOOL Star_SRPI_IsWindowlessSite(void *c_this);
extern void Star_SRPI_RegWindowlessSiteCallBack(void *c_this,struct VSWindowlessSiteCallBackInfo *CallBackInfo, VS_UUID *ObjectID, VS_UWORD Para );
extern void Star_SRPI_UnRegWindowlessSiteCallBack(void *c_this,struct VSWindowlessSiteCallBackInfo *CallBackInfo, VS_UUID *ObjectID, VS_UWORD Para );
extern VS_BOOL Star_SRPI_IsWindowlessTransparent(void *c_this);
extern void Star_SRPI_Windowless_Redraw(void *c_this, VS_BOOL fErase );
extern void Star_SRPI_Windowless_GetDC(void *c_this, void **hDC,VS_RECT *rEct );
extern void Star_SRPI_Windowless_ReleaseDC(void *c_this, void *hDC );
extern void Star_SRPI_KillClientWndFocus(void *c_this, VS_HWND hWnd, VS_BOOL NeedAction );
extern VS_BOOL Star_SRPI_XmlToSysRootItem(void *c_this,void *SXMLInterface,const VS_CHAR *DataPath,const VS_CHAR *SegmentName,SRPParse_PrintProc PrintProc,VS_UWORD Para);
extern VS_BOOL Star_SRPI_XmlToObject(void *c_this,void *SXMLInterface,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,const VS_CHAR *DataPath,const VS_CHAR *SegmentName,SRPParse_PrintProc PrintProc,VS_UWORD Para);
extern VS_BOOL Star_SRPI_ServiceToXml(void *c_this,void *SXMLInterface,const VS_CHAR *PassWord,const VS_CHAR *DataPath,VS_BOOL CFunctionFlag,VS_BOOL OutputObjectID,SRPParse_PrintProc PrintProc,VS_UWORD Para);
extern VS_BOOL Star_SRPI_SysRootItemToXml(void *c_this,void *SXMLInterface,const VS_CHAR *SysRootItemName,const VS_CHAR *DataPath,VS_BOOL CFunctionFlag,VS_BOOL OutputObjectID,SRPParse_PrintProc PrintProc,VS_UWORD Para);
extern VS_BOOL Star_SRPI_ObjectToXml(void *c_this,void *SXMLInterface,void *Object,const VS_CHAR *DataPath,VS_BOOL CFunctionFlag,VS_BOOL OutputObjectID,SRPParse_PrintProc PrintProc,VS_UWORD Para);
extern VS_UUID *Star_SRPI_GetVSObjectID(void *c_this,VS_INT32 Which);
extern void *Star_SRPI_GetBasicInterface(void *c_this);
extern void *Star_SRPI_GetSXMLInterface(void *c_this);
extern void *Star_SRPI_GetFunctionParaInterface(void *c_this);
extern void *Star_SRPI_GetSRPLockInterface(void *c_this);
extern void *Star_SRPI_GetSRPBinBufInterface(void *c_this);
extern void *Star_SRPI_GetParaPkgInterface(void *c_this);
extern void *Star_SRPI_GetEnvMemoryFile(void *c_this);
extern void *Star_SRPI_GetCommInterface(void *c_this);
extern void *Star_SRPI_GetFileDiskInterface(void *c_this);
extern void Star_SRPI_GetSRPConfigPath(void *c_this,VS_ULONG BufSize,VS_CHAR *Buf);
extern VS_BOOL Star_SRPI_RegTempFile(void *c_this,const VS_CHAR *TempFileName,const VS_CHAR *OriFileName);
extern VS_CHAR *Star_SRPI_GetRegTempFile(void *c_this,const VS_CHAR *OriFileName,VS_CHAR *Buf,VS_INT32 BufSize);
extern void Star_SRPI_UnRegTempFile(void *c_this,const VS_CHAR *TempFileName);
extern void *Star_SRPI_QueryInterface(void *c_this, VS_UUID *InterfaceID );
extern VS_BOOL Star_SRPI_LockLuaTable(void *c_this);
extern VS_BOOL Star_SRPI_UnLockLuaTable(void *c_this);
extern VS_UUID *Star_SRPI_GetIDEx(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_IsRootService(void *c_this);
extern VS_BOOL Star_SRPI_LuaGetObjectValue(void *c_this,void *Object,const VS_CHAR *Name);
extern VS_BOOL Star_SRPI_LuaSetObjectValue(void *c_this,void *Object,const VS_CHAR *Name);
extern void *Star_SRPI_GetSRPInterface(void *c_this,void *Object);
extern void *Star_SRPI_GetSRPInterfaceEx(void *c_this,VS_UUID *ObjectID);
extern VS_BOOL Star_SRPI_IsThisServiceEx(void *c_this,VS_UUID *ObjectID);
extern void Star_SRPI_AddRef(void *c_this);
extern VS_INT32 Star_SRPI_GetRef(void *c_this);
extern void Star_SRPI_SetLog(void *c_this,void *Object,VS_BOOL Flag);
extern void Star_SRPI_SetLogFile(void *c_this,const VS_CHAR *FileName);
extern VS_CHAR *Star_SRPI_GetLogFile(void *c_this);
extern void Star_SRPI_ClearLog(void *c_this);
extern VS_BOOL Star_SRPI_ApplyLog(void *c_this);
/*extern VS_UWORD Star_SRPI_Call(void *c_this,void *Object,const VS_CHAR *FunctionName,...); */
/*extern VS_UWORD Star_SRPI_CallVar(void *c_this,void *Object,const VS_CHAR *FunctionName,va_list argList); */
/*extern VS_FLOAT Star_SRPI_FCall(void *c_this,void *Object,const VS_CHAR *FunctionName,...); */
/*extern VS_FLOAT Star_SRPI_FCallVar(void *c_this,void *Object,const VS_CHAR *FunctionName,va_list argList); */
/*extern VS_BOOL Star_SRPI_Set(void *c_this,void *Object,const VS_CHAR *AttributeName,...); */
/*extern VS_BOOL Star_SRPI_SetEx(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex,...); */
/*extern VS_BOOL Star_SRPI_SetVar(void *c_this,void *Object,const VS_CHAR *AttributeName,va_list argList); */
/*extern VS_BOOL Star_SRPI_SetVarEx(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex,va_list argList); */
extern VS_UWORD Star_SRPI_Get(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_UWORD Star_SRPI_GetEx(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex);
extern VS_FLOAT Star_SRPI_FGet(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_FLOAT Star_SRPI_FGetEx(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex);
extern VS_CHAR *Star_SRPI_LuaToLString(void *c_this,VS_INT32 index,VS_ULONG *len);
extern VS_BOOL Star_SRPI_SetNameBoolValue(void *c_this, void *Object,const VS_CHAR *Name, VS_BOOL Value, VS_BOOL LocalChange  );
extern VS_BOOL Star_SRPI_GetNameBoolValue(void *c_this, void *Object,const VS_CHAR *Name, VS_BOOL *Value, VS_BOOL DefaultValue  );
extern VS_BOOL Star_SRPI_LuaIsInt(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_AtomicAttach(void *c_this, void *AtomicObject,const VS_CHAR *ShareLibName );
extern VS_BOOL Star_SRPI_IsGlobalFunction(void *c_this,VS_UUID *FunctionID);
extern VS_BOOL Star_SRPI_IsGlobalFunctionEx(void *c_this,void *Object,VS_UUID *FunctionID);
extern void Star_SRPI_LuaGetDefinedClass(void *c_this,void *Object,VS_UUID *ObjectID);
extern VS_BOOL Star_SRPI_LuaGetDefinedClassEx(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_UUID *ObjectID);
/*extern VS_UWORD Star_SRPI_ScriptCall(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,...); */
/*extern VS_UWORD Star_SRPI_ScriptCallVar(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,va_list argList); */
/*extern VS_FLOAT Star_SRPI_ScriptFCall(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,...); */
/*extern VS_FLOAT Star_SRPI_ScriptFCallVar(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,va_list argList); */
/*extern VS_BOOL Star_SRPI_ScriptRCall(void *c_this,VS_ULONG ClientID,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,...); */
/*extern VS_BOOL Star_SRPI_ScriptRCallVar(void *c_this,VS_ULONG ClientID,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,va_list argList); */
/*extern VS_BOOL Star_SRPI_ScriptRCallEx(void *c_this,VS_ULONG ExcludeClientID,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,...); */
/*extern VS_BOOL Star_SRPI_ScriptRCallExVar(void *c_this,VS_ULONG ExcludeClientID,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,va_list argList); */
/*extern VS_UWORD Star_SRPI_ScriptSRCall(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,...); */
/*extern VS_UWORD Star_SRPI_ScriptSRCallVar(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,va_list argList); */
/*extern VS_FLOAT Star_SRPI_ScriptFSRCall(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,...); */
/*extern VS_FLOAT Star_SRPI_ScriptFSRCallVar(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,va_list argList); */
extern VS_BOOL Star_SRPI_ScriptSetBool(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_BOOL Value);
extern VS_BOOL Star_SRPI_ScriptSetInt(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_INT32 Value);
extern VS_BOOL Star_SRPI_ScriptSetNumber(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_FLOAT Value);
extern VS_BOOL Star_SRPI_ScriptSetStr(void *c_this,void *Object,const VS_CHAR *AttributeName,const VS_CHAR *Value);
extern VS_BOOL Star_SRPI_ScriptSetObject(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_UINT8 Type,VS_UWORD Value);
extern VS_BOOL Star_SRPI_ScriptGetBool(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_INT32 Star_SRPI_ScriptGetInt(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_FLOAT Star_SRPI_ScriptGetNumber(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_CHAR *Star_SRPI_ScriptGetStr(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_UWORD Star_SRPI_ScriptGetObject(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_UINT8 *RetType);
extern VS_BOOL Star_SRPI_IsRegistered(void *c_this);
extern void Star_SRPI_SetVString(void *c_this,VS_VSTRING *Buf,const VS_CHAR *Str);
extern VS_VSTRING *Star_SRPI_ToVString(void *c_this,const VS_CHAR *Str);
extern void Star_SRPI_CheckPassword(void *c_this,VS_BOOL CheckFlag);
extern VS_INT32 Star_SRPI_ScriptGetStack(void *c_this);
extern VS_BOOL Star_SRPI_ScriptSetStack(void *c_this,VS_INT32 Top);
extern void Star_SRPI_SetSourceScript(void *c_this,void *Object,VS_INT32 SourceScript);
extern VS_INT32 Star_SRPI_GetSourceScript(void *c_this,void *Object);
extern VS_CHAR *Star_SRPI_FirstShareLib(void *c_this, VS_QUERYRECORD *QueryRecord );
extern VS_CHAR *Star_SRPI_NextShareLib(void *c_this, VS_QUERYRECORD *QueryRecord );
extern VS_HANDLE Star_SRPI_GetShareLib(void *c_this, const VS_CHAR *ShareLibName );
extern void Star_SRPI_FreeShareLib(void *c_this, VS_HANDLE ShareLibHandle );
extern VS_ULONG Star_SRPI_NewGroup(void *c_this);
extern void Star_SRPI_FreeGroup(void *c_this,VS_ULONG GroupID);
extern VS_LONG Star_SRPI_GroupAdd(void *c_this,VS_ULONG GroupID,void *Object);
extern void *Star_SRPI_GroupGet(void *c_this,VS_ULONG GroupID,VS_LONG RefID);
extern void Star_SRPI_GroupRemove(void *c_this,VS_ULONG GroupID,VS_LONG RefID);
extern void Star_SRPI_GroupRemoveEx(void *c_this,VS_ULONG GroupID,void *Object);
extern void Star_SRPI_GroupClear(void *c_this,VS_ULONG GroupID,VS_BOOL FreeObject);
extern VS_BOOL Star_SRPI_DoFileEx(void *c_this, const VS_CHAR *ScriptInterface,const VS_CHAR *FileName, VS_CHAR **ErrorInfo, const VS_CHAR *WorkDirectory, VS_BOOL IsUTF8,const VS_CHAR *ModuleName );
extern VS_BOOL Star_SRPI_SetCallSuper(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_SetCallBase(void *c_this,void *Object,void *Class);
extern VS_BOOL Star_SRPI_PushCallBase(void *c_this,void *Object,void *Class);
extern VS_BOOL Star_SRPI_PopCallBase(void *c_this,void *Object,void *Class);
extern void Star_SRPI_RegGetObjectCallBack(void *c_this,VS_GetObjectCallBackProc CallBackProc,VS_UWORD Para);
extern void Star_SRPI_UnRegGetObjectCallBack(void *c_this,VS_GetObjectCallBackProc CallBackProc,VS_UWORD Para);
extern void Star_SRPI_RegGetObjectExCallBack(void *c_this,VS_GetObjectExCallBackProc CallBackProc,VS_UWORD Para);
extern void Star_SRPI_UnRegGetObjectExCallBack(void *c_this,VS_GetObjectExCallBackProc CallBackProc,VS_UWORD Para);
extern void Star_SRPI_LuaReplace(void *c_this,VS_INT32 index);
extern void Star_SRPI_LuaCheckStack(void *c_this,VS_INT32 sz);
extern VS_BOOL Star_SRPI_LuaIsUserData(void *c_this,VS_INT32 index);
extern VS_BOOL Star_SRPI_LuaIsLightUserData(void *c_this,VS_INT32 index);
extern VS_INT32 Star_SRPI_LuaRawEqual(void *c_this,VS_INT32 index1, VS_INT32 index2);
extern VS_INT32 Star_SRPI_LuaCompare(void *c_this,VS_INT32 index1, VS_INT32 index2, VS_INT32 op);
extern void Star_SRPI_LuaConcat(void *c_this,VS_INT32 n);
extern void Star_SRPI_LuaCopy(void *c_this,VS_INT32 fromidx, VS_INT32 toidx);
extern void *Star_SRPI_LuaToPointer(void *c_this,VS_INT32 index);
extern void *Star_SRPI_LuaToCFunction(void *c_this,VS_INT32 index);
extern void Star_SRPI_LuaPushLightUserData(void *c_this,void *p);
extern void Star_SRPI_LuaRawGet(void *c_this,VS_INT32 index);
extern void Star_SRPI_LuaRawGeti(void *c_this,VS_INT32 index, VS_INT32 n);
extern void Star_SRPI_LuaCreateTable(void *c_this,VS_INT32 narr, VS_INT32 nrec);
extern VS_INT32 Star_SRPI_LuaGetMetatable(void *c_this,VS_INT32 index);
extern void Star_SRPI_LuaSetField(void *c_this,VS_INT32 index, const VS_CHAR *k);
extern void Star_SRPI_LuaRawSet(void *c_this,VS_INT32 index);
extern void Star_SRPI_LuaRawSeti(void *c_this,VS_INT32 index, VS_INT32 n);
extern void Star_SRPI_LuaSetMetatable(void *c_this,VS_INT32 index);
extern VS_INT32 Star_SRPI_Lua_PCall(void *c_this,VS_INT32 nargs, VS_INT32 nresults, VS_INT32 msgh);
extern void Star_SRPI_Lua_Call(void *c_this,VS_INT32 nargs, VS_INT32 nresults);
extern void *Star_SRPI_LuaAtPanic(void *c_this,void *panicf);
extern VS_INT32 Star_SRPI_LuaGC(void *c_this,VS_INT32 what, VS_INT32 data);
extern VS_INT32 Star_SRPI_LuaError(void *c_this);
extern VS_INT32 Star_SRPI_LuaIsNoneOrNil(void *c_this,VS_INT32 index);
extern VS_CHAR *Star_SRPI_LuaTypeName(void *c_this,VS_INT32 tp);
extern void Star_SRPI_LuaL_CheckAny(void *c_this,VS_INT32 narg);
extern VS_INT32 Star_SRPI_LuaL_CheckInt(void *c_this,VS_INT32 narg);
extern VS_LONG Star_SRPI_LuaL_CheckLong(void *c_this,VS_INT32 narg);
extern const VS_CHAR *Star_SRPI_LuaL_CheckLString(void *c_this,VS_INT32 narg, VS_INT32 *l);
extern VS_DOUBLE Star_SRPI_LuaL_CheckNumber(void *c_this,VS_INT32 narg);
extern VS_INT32 Star_SRPI_LuaL_CheckOption(void *c_this,VS_INT32 narg,const VS_CHAR *def,const VS_CHAR *lst[]);
extern void Star_SRPI_LuaL_CheckStack(void *c_this,VS_INT32 sz, const VS_CHAR *msg);
extern const VS_CHAR *Star_SRPI_LuaL_CheckString(void *c_this,VS_INT32 narg);
extern void Star_SRPI_LuaL_CheckType(void *c_this,VS_INT32 narg, VS_INT32 t);
extern void *Star_SRPI_LuaL_CheckUData(void *c_this,VS_INT32 narg, const VS_CHAR *tname);
extern void Star_SRPI_LuaL_CheckVersion(void *c_this);
extern VS_INT32 Star_SRPI_LuaL_DoFile(void *c_this,const VS_CHAR *filename);
extern VS_INT32 Star_SRPI_LuaL_DoString(void *c_this,const VS_CHAR *str);
extern VS_INT32 Star_SRPI_LuaL_Error(void *c_this,const VS_CHAR *info);
extern void Star_SRPI_LuaL_GetMetatable(void *c_this,const VS_CHAR *tname);
extern VS_INT32 Star_SRPI_LuaL_GetSubTable(void *c_this,VS_INT32 idx, const VS_CHAR *fname);
extern VS_INT32 Star_SRPI_LuaL_Len(void *c_this,VS_INT32 index);
extern VS_INT32 Star_SRPI_LuaL_LoadBuffer(void *c_this,const VS_CHAR *buff,VS_INT32 sz,const VS_CHAR *name);
extern VS_INT32 Star_SRPI_LuaL_LoadBufferx(void *c_this,const VS_CHAR *buff,VS_INT32 sz,const VS_CHAR *name,const VS_CHAR *mode);
extern VS_INT32 Star_SRPI_LuaL_LoadFile(void *c_this,const VS_CHAR *filename);
extern VS_INT32 Star_SRPI_LuaL_LoadFilex(void *c_this,const VS_CHAR *filename,const VS_CHAR *mode);
extern VS_INT32 Star_SRPI_LuaL_LoadString(void *c_this,const VS_CHAR *s);
extern void Star_SRPI_LuaL_NewLib(void *c_this,const VSLuaL_Reg *l);
extern VS_INT32 Star_SRPI_LuaL_NewMetatable(void *c_this,const VS_CHAR *tname);
extern VS_INT32 Star_SRPI_LuaL_Ref(void *c_this,VS_INT32 t);
extern void Star_SRPI_LuaL_Requiref(void *c_this,const VS_CHAR *modname,void *openf, VS_INT32 glb);
extern void Star_SRPI_LuaL_SetFuncs(void *c_this,const VSLuaL_Reg *l, VS_INT32 nup);
extern void Star_SRPI_LuaL_SetMetatable(void *c_this,const VS_CHAR *tname);
extern void *Star_SRPI_LuaL_TestUData(void *c_this,VS_INT32 narg, const VS_CHAR *tname);
extern const VS_CHAR *Star_SRPI_LuaL_ToLString(void *c_this,VS_INT32 idx, VS_INT32 *len);
extern const VS_CHAR *Star_SRPI_LuaL_TypeName(void *c_this,VS_INT32 index);
extern void Star_SRPI_LuaL_UnRef(void *c_this,VS_INT32 t, VS_INT32 ref);
extern void Star_SRPI_LuaL_Where(void *c_this,VS_INT32 lvl);
extern void *Star_SRPI_GetControlService(void *c_this);
extern VS_BOOL Star_SRPI_RegLuaFuncFilter(void *c_this, void *Object, VS_LuaFuncFilterProc Filter, VS_UWORD Para);
extern VS_BOOL Star_SRPI_UnRegLuaFuncFilter(void *c_this, void *Object, VS_LuaFuncFilterProc Filter, VS_UWORD Para );
extern VS_BOOL Star_SRPI_RegNewFunctionCallBack(void *c_this, void *Object, VS_NewFunctionCallBackProc callback, VS_UWORD Para);
extern VS_BOOL Star_SRPI_UnRegNewFunctionCallBack(void *c_this, void *Object, VS_NewFunctionCallBackProc callback, VS_UWORD Para );
extern VS_BOOL Star_SRPI_IsRegLuaFunc(void *c_this, void *Object, const VS_CHAR *FuncName, void *FuncAddress, VS_UWORD Para);
extern void *Star_SRPI_IMallocStaticObject(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_PARAPKGPTR InitBuf);
extern void *Star_SRPI_IMallocStaticObjectEx(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_PARAPKGPTR InitBuf);
extern void *Star_SRPI_IMallocGlobalObject(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_PARAPKGPTR InitBuf,VS_ULONG ClientID);
extern void *Star_SRPI_IMallocGlobalObjectEx(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_PARAPKGPTR InitBuf,VS_ULONG ClientID);
extern void *Star_SRPI_IMallocObject(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_PARAPKGPTR InitBuf);
extern void *Star_SRPI_IMallocObjectEx(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_PARAPKGPTR InitBuf);
extern void *Star_SRPI_IMallocObjectL(void *c_this,VS_UUID *ObjectClassID,VS_PARAPKGPTR InitBuf);
extern void *Star_SRPI_IMallocObjectLEx(void *c_this,VS_UUID *ObjectID,VS_UUID *ObjectClassID,VS_PARAPKGPTR InitBuf);
extern void *Star_SRPI_IMallocClientObject(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_PARAPKGPTR InitBuf,VS_ULONG ClientID);
extern void *Star_SRPI_IMallocClientObjectEx(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_PARAPKGPTR InitBuf,VS_ULONG ClientID);
extern VS_BOOL Star_SRPI_LoadRawModule(void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *ModuleName,const VS_CHAR *FileOrString,VS_BOOL IsString,VS_CHAR **ErrorInfo);
extern VS_BOOL Star_SRPI_LoadRawModuleEx(void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *ModuleName,void *Object,VS_CHAR **ErrorInfo);
extern VS_BOOL Star_SRPI_AttachRawContext(void *c_this,void *Object,const VS_CHAR *ScriptInterface,const VS_CHAR *ContextName, VS_BOOL IsClass, const VS_CHAR *ContextInfo);
extern void Star_SRPI_DetachRawContext(void *c_this,void *Object,VS_BOOL CallUnLockGC);
extern VS_CHAR *Star_SRPI_GetRawContextType(void *c_this,void *Object,VS_CHAR **ScriptInterface);
extern VS_BOOL Star_SRPI_CreateRawContextBuf(void *c_this,void *Object,const VS_CHAR *ScriptInterface,VS_INT8 *ContextBuf,VS_INT32 ContextBufSize);
extern void *Star_SRPI_GetRawContextBuf(void *c_this,void *Object,const VS_CHAR *ScriptInterface);
extern VS_BOOL Star_SRPI_HasRawContext(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_RawContextEquals(void *c_this,void *Object1,void *Object2);
extern void *Star_SRPI_NewRawProxy(void *c_this,const VS_CHAR *ScriptInterface,void *AttachObject,const VS_CHAR *AttachFunction,const VS_CHAR *ProyInfo,VS_INT32 ProxyType);
extern void *Star_SRPI_NewRawProxyEx(void *c_this,void *Object,const VS_CHAR *ScriptInterface,const VS_CHAR *AttachFunction,const VS_CHAR *ProyInfo);
extern VS_CHAR *Star_SRPI_CreateRawProxyCode(void *c_this, const VS_CHAR *ScriptInterface,const VS_CHAR *NewPackageName,const VS_CHAR *Imports,const VS_CHAR *NewClassName,const VS_CHAR *BaseClass, const VS_CHAR *Methods, const VS_CHAR *Interface );
extern void *Star_SRPI_ImportRawContext(void *c_this,const VS_CHAR *ScriptInterface,const VS_CHAR *ContextName, VS_BOOL IsClass, const VS_CHAR *ContextInfo);
extern void *Star_SRPI_AssignRawObject(void *c_this, void *Object,void *RawObject );
extern VS_PARAPKGPTR Star_SRPI_GetInitPara(void *c_this,void *Object);
extern void* Star_SRPI_NewScriptRawType(void *c_this, VS_INT32 RawType, VS_BOOL *IsParaPkg );
extern VS_BOOL Star_SRPI_SetScriptRawType(void *c_this,void *Object,VS_INT32 RawType);
extern VS_INT32 Star_SRPI_GetScriptRawType(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_RegRawLuaSetValueFunc(void *c_this, void *Object, VS_LuaSetValueProc SetValueProc, VS_UWORD Para );
extern void *Star_SRPI_GetRawLuaSetValueFunc(void *c_this, void *Object, const VS_CHAR *ValueName,VS_UWORD *Para );
extern VS_BOOL Star_SRPI_UnRegRawLuaSetValueFunc(void *c_this, void *Object, VS_LuaSetValueProc SetValueProc, VS_UWORD Para );
extern void Star_SRPI_AddRefEx(void *c_this,void *Object);
extern void Star_SRPI_DelRefEx(void *c_this,void *Object);
extern void Star_SRPI_ReleaseOwner(void *c_this);
extern VS_BOOL Star_SRPI_ReleaseOwnerEx(void *c_this,void *Object);
extern VS_BOOL Star_SRPI_ReleaseOwnerExForScript(void *c_this,const VS_CHAR *ScriptInterface,void *Object);
extern void Star_SRPI_CaptureOwnerExForScript(void *c_this,const VS_CHAR *ScriptInterface,void *Object);
extern VS_INT32 Star_SRPI_GetRefEx(void *c_this,void *Object);
extern VS_CHAR *Star_SRPI_GetRefInfo(void *c_this,void *Object);
extern VS_INT32 Star_SRPI_GetLastError(void *c_this);
extern VS_CHAR *Star_SRPI_GetLastErrorInfo(void *c_this,VS_UINT32 *LineIndex,VS_CHAR **SourceName);
extern void *Star_SRPI_CreateAtomicFunctionSimpleEx(void *c_this,void *AtomicObject, const VS_CHAR *FunctionName,const VS_CHAR *Attribute, void *FuncAddress, VS_CHAR **ErrorInfo);
extern void *Star_SRPI_LuaIsFunctionDefined(void *c_this, void *Object, const VS_CHAR *FuncName, VS_BOOL IncludeRawOrDefaultFunction );
extern void *Star_SRPI_LuaToRaw(void *c_this,VS_INT32 Index,VS_BOOL IsClass);
extern VS_BOOL Star_SRPI_LuaTableToParaPkg(void *c_this,VS_INT32 Index,void *ParaPkg,VS_BOOL TableCanBeWrap);
extern VS_BOOL Star_SRPI_ScriptSetBoolIndex(void *c_this,void *Object,VS_INT32 Index,VS_BOOL Value);
extern VS_BOOL Star_SRPI_ScriptSetIntIndex(void *c_this,void *Object,VS_INT32 Index,VS_INT32 Value);
extern VS_BOOL Star_SRPI_ScriptSetNumberIndex(void *c_this,void *Object,VS_INT32 Index,VS_FLOAT Value);
extern VS_BOOL Star_SRPI_ScriptSetStrIndex(void *c_this,void *Object,VS_INT32 Index,const VS_CHAR *Value);
extern VS_BOOL Star_SRPI_ScriptSetObjectIndex(void *c_this,void *Object,VS_INT32 Index,VS_UINT8 Type,VS_UWORD Value);
extern VS_BOOL Star_SRPI_ScriptGetBoolIndex(void *c_this,void *Object,VS_INT32 Index);
extern VS_INT32 Star_SRPI_ScriptGetIntIndex(void *c_this,void *Object,VS_INT32 Index);
extern VS_FLOAT Star_SRPI_ScriptGetNumberIndex(void *c_this,void *Object,VS_INT32 Index);
extern VS_CHAR *Star_SRPI_ScriptGetStrIndex(void *c_this,void *Object,VS_INT32 Index);
extern VS_UWORD Star_SRPI_ScriptGetObjectIndex(void *c_this,void *Object,VS_INT32 Index,VS_UINT8 *RetType);
extern VS_UWORD Star_SRPI_ScriptGetRawObject(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_UINT8 *RetType);
extern VS_UWORD Star_SRPI_ScriptGetRawObjectIndex(void *c_this,void *Object,VS_INT32 Index,VS_UINT8 *RetType);
extern void Star_SRPI_SetReturnRawFlag(void *c_this,void *Object,VS_BOOL ReturnRawFlag);
extern VS_BOOL Star_SRPI_GetReturnRawFlag(void *c_this,void *Object);
/*extern VS_UWORD Star_SRPI_ScriptCall2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
/*extern VS_UWORD Star_SRPI_ScriptCallVar2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList); */
/*extern VS_UWORD Star_SRPI_ScriptSRCall2(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
/*extern VS_UWORD Star_SRPI_ScriptSRCallVar2(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList); */
/*extern void *Star_SRPI_IMallocStaticObject2(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,...); */
/*extern void *Star_SRPI_IMallocStaticObjectEx2(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,...); */
/*extern void *Star_SRPI_IMallocGlobalObject2(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_ULONG ClientID,const VS_CHAR *TypeSet,...); */
/*extern void *Star_SRPI_IMallocGlobalObjectEx2(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_ULONG ClientID,const VS_CHAR *TypeSet,...); */
/*extern void *Star_SRPI_IMallocObject2(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,...); */
/*extern void *Star_SRPI_IMallocObjectEx2(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,...); */
/*extern void *Star_SRPI_IMallocObjectL2(void *c_this,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,...); */
/*extern void *Star_SRPI_IMallocObjectLEx2(void *c_this,VS_UUID *ObjectID,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,...); */
/*extern void *Star_SRPI_IMallocClientObject2(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_ULONG ClientID,const VS_CHAR *TypeSet,...); */
/*extern void *Star_SRPI_IMallocClientObjectEx2(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_ULONG ClientID,const VS_CHAR *TypeSet,...); */
/*extern void *Star_SRPI_IMallocStaticObjectVar2(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,va_list argList); */
/*extern void *Star_SRPI_IMallocStaticObjectExVar2(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,va_list argList); */
/*extern void *Star_SRPI_IMallocGlobalObjectVar2(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_ULONG ClientID,const VS_CHAR *TypeSet,va_list argList); */
/*extern void *Star_SRPI_IMallocGlobalObjectExVar2(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_ULONG ClientID,const VS_CHAR *TypeSet,va_list argList); */
/*extern void *Star_SRPI_IMallocObjectVar2(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,va_list argList); */
/*extern void *Star_SRPI_IMallocObjectExVar2(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,va_list argList); */
/*extern void *Star_SRPI_IMallocObjectLVar2(void *c_this,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,va_list argList); */
/*extern void *Star_SRPI_IMallocObjectLExVar2(void *c_this,VS_UUID *ObjectID,VS_UUID *ObjectClassID,const VS_CHAR *TypeSet,va_list argList); */
/*extern void *Star_SRPI_IMallocClientObjectVar2(void *c_this,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_ULONG ClientID,const VS_CHAR *TypeSet,va_list argList); */
/*extern void *Star_SRPI_IMallocClientObjectExVar2(void *c_this,VS_UUID *ObjectID,void *ParentObject,OBJECTATTRIBUTEINDEX AttributeIndex,VS_UUID *ObjectClassID,VS_ULONG ClientID,const VS_CHAR *TypeSet,va_list argList); */
extern VS_BOOL Star_SRPI_LuaSyncCall(void *c_this, void *Object, const VS_CHAR *ScriptName, VS_INT32 nArgs,VS_INT32 nOutArgs );
/*extern VS_UWORD Star_SRPI_ScriptSyncCall(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,...); */
/*extern VS_UWORD Star_SRPI_ScriptSyncCallVar(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,va_list argList); */
/*extern VS_FLOAT Star_SRPI_ScriptSyncFCall(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,...); */
/*extern VS_FLOAT Star_SRPI_ScriptSyncFCallVar(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,va_list argList); */
/*extern VS_UWORD Star_SRPI_ScriptSyncCall2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
/*extern VS_UWORD Star_SRPI_ScriptSyncCallVar2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList); */
extern void Star_SRPI_LuaPushInt64(void *c_this,VS_INT64 Value);
extern VS_INT64 Star_SRPI_LuaToInt64(void *c_this, VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsInt64(void *c_this, VS_INT32 Index );
extern void Star_SRPI_LuaPushUWord(void *c_this,VS_UWORD Value);
extern VS_UWORD Star_SRPI_LuaToUWord(void *c_this,VS_INT32 Index );
extern VS_BOOL Star_SRPI_LuaIsUWord(void *c_this,VS_INT32 Index );
/*extern VS_INT64 Star_SRPI_SRemoteCallInt64(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object,VS_UUID *FunctionID,...); */
extern VS_INT64 Star_SRPI_SRemoteCallInt64Var(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object,VS_UUID *FunctionID,va_list argList);
/*extern VS_DOUBLE Star_SRPI_SRemoteCallDouble(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object,VS_UUID *FunctionID,...); */
extern VS_DOUBLE Star_SRPI_SRemoteCallDoubleVar(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object,VS_UUID *FunctionID,va_list argList);
/*extern VS_DOUBLE Star_SRPI_CallDouble(void *c_this,void *Object,const VS_CHAR *FunctionName,...); */
extern VS_DOUBLE Star_SRPI_CallDoubleVar(void *c_this,void *Object,const VS_CHAR *FunctionName,va_list argList);
/*extern VS_INT64 Star_SRPI_CallInt64(void *c_this,void *Object,const VS_CHAR *FunctionName,...); */
extern VS_INT64 Star_SRPI_CallInt64Var(void *c_this,void *Object,const VS_CHAR *FunctionName,va_list argList);
extern VS_INT64 Star_SRPI_GetInt64(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_INT64 Star_SRPI_GetInt64Ex(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex);
extern VS_DOUBLE Star_SRPI_GetDouble(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_DOUBLE Star_SRPI_GetDoubleEx(void *c_this,void *Object,OBJECTATTRIBUTEINDEX AttributeIndex);
/*extern VS_INT64 Star_SRPI_ScriptCallInt64(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,...); */
extern VS_INT64 Star_SRPI_ScriptCallInt64Var(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,va_list argList);
/*extern VS_DOUBLE Star_SRPI_ScriptCallDouble(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,...); */
extern VS_DOUBLE Star_SRPI_ScriptCallDoubleVar(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,va_list argList);
/*extern VS_INT64 Star_SRPI_ScriptSRCallInt64(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,...); */
extern VS_INT64 Star_SRPI_ScriptSRCallInt64Var(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,va_list argList);
/*extern VS_DOUBLE Star_SRPI_ScriptSRCallDouble(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,...); */
extern VS_DOUBLE Star_SRPI_ScriptSRCallDoubleVar(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,va_list argList);
extern VS_BOOL Star_SRPI_ScriptSetInt64(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_INT64 Value);
extern VS_BOOL Star_SRPI_ScriptSetDouble(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_DOUBLE Value);
extern VS_INT64 Star_SRPI_ScriptGetInt64(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_DOUBLE Star_SRPI_ScriptGetDouble(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_BOOL Star_SRPI_ScriptSetInt64Index(void *c_this,void *Object,VS_INT32 Index,VS_INT64 Value);
extern VS_BOOL Star_SRPI_ScriptSetDoubleIndex(void *c_this,void *Object,VS_INT32 Index,VS_DOUBLE Value);
extern VS_INT64 Star_SRPI_ScriptGetInt64Index(void *c_this,void *Object,VS_INT32 Index);
extern VS_DOUBLE Star_SRPI_ScriptGetDoubleIndex(void *c_this,void *Object,VS_INT32 Index);
extern VS_INT64 Star_SRPI_ScriptGetRawObjectInt64(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_DOUBLE Star_SRPI_ScriptGetRawObjectDouble(void *c_this,void *Object,const VS_CHAR *AttributeName);
extern VS_INT64 Star_SRPI_ScriptGetRawObjectIndexInt64(void *c_this,void *Object,VS_INT32 Index);
extern VS_DOUBLE Star_SRPI_ScriptGetRawObjectIndexDouble(void *c_this,void *Object,VS_INT32 Index);
/*extern VS_FLOAT Star_SRPI_ScriptFCall2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
/*extern VS_FLOAT Star_SRPI_ScriptFCallVar2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList); */
/*extern VS_INT64 Star_SRPI_ScriptCallInt642(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
extern VS_INT64 Star_SRPI_ScriptCallInt64Var2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList);
/*extern VS_DOUBLE Star_SRPI_ScriptCallDouble2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
extern VS_DOUBLE Star_SRPI_ScriptCallDoubleVar2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList);
/*extern VS_FLOAT Star_SRPI_ScriptFSRCall2(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
/*extern VS_FLOAT Star_SRPI_ScriptFSRCallVar2(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList); */
/*extern VS_INT64 Star_SRPI_ScriptSRCallInt642(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
extern VS_INT64 Star_SRPI_ScriptSRCallInt64Var2(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList);
/*extern VS_DOUBLE Star_SRPI_ScriptSRCallDouble2(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
extern VS_DOUBLE Star_SRPI_ScriptSRCallDoubleVar2(void *c_this,VS_ULONG WaitTime,VS_ULONG ClientID,VS_ULONG *RetCode,void *Object, const VS_CHAR *ScriptName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList);
/*extern VS_INT64 Star_SRPI_ScriptSyncCallInt64(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,...); */
extern VS_INT64 Star_SRPI_ScriptSyncCallInt64Var(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,va_list argList);
/*extern VS_DOUBLE Star_SRPI_ScriptSyncCallDouble(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,...); */
extern VS_DOUBLE Star_SRPI_ScriptSyncCallDoubleVar(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,va_list argList);
/*extern VS_FLOAT Star_SRPI_ScriptSyncFCall2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
/*extern VS_FLOAT Star_SRPI_ScriptSyncFCallVar2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList); */
/*extern VS_INT64 Star_SRPI_ScriptSyncCallInt642(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
extern VS_INT64 Star_SRPI_ScriptSyncCallInt64Var2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList);
/*extern VS_DOUBLE Star_SRPI_ScriptSyncCallDouble2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,...); */
extern VS_DOUBLE Star_SRPI_ScriptSyncCallDoubleVar2(void *c_this,void *Object,VS_ULONG *RetCode,const VS_CHAR *FunctionName,const VS_CHAR *TypeSet,VS_UINT8 *RetType,va_list argList);
extern VS_UWORD Star_SRPI_ScriptGetObjectEx(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_UINT8 *RetType,VS_DOUBLE *RetDouble,VS_INT64 *RetInt64);
extern VS_UWORD Star_SRPI_ScriptGetObjectIndexEx(void *c_this,void *Object,VS_INT32 Index,VS_UINT8 *RetType,VS_DOUBLE *RetDouble,VS_INT64 *RetInt64);
extern VS_UWORD Star_SRPI_ScriptGetRawObjectEx(void *c_this,void *Object,const VS_CHAR *AttributeName,VS_UINT8 *RetType,VS_DOUBLE *RetDouble,VS_INT64 *RetInt64);
extern VS_UWORD Star_SRPI_ScriptGetRawObjectIndexEx(void *c_this,void *Object,VS_INT32 Index,VS_UINT8 *RetType,VS_DOUBLE *RetDouble,VS_INT64 *RetInt64);
extern void Star_SRPI_RemoteCallRspInt64(void *c_this,void *Object,VS_ULONG ClientID,VS_ULONG RemoteCallID,const VS_CHAR *RemoteCallName,VS_UINT16 RemoteSourceTag,VS_ULONG RetCode,VS_INT64 RetValue, void *RemoteAttach);
extern void Star_SRPI_RemoteCallRspDouble(void *c_this,void *Object,VS_ULONG ClientID,VS_ULONG RemoteCallID,const VS_CHAR *RemoteCallName,VS_UINT16 RemoteSourceTag,VS_ULONG RetCode,VS_DOUBLE RetValue, void *RemoteAttach);
extern void *Star_SRPI_RawToParaPkg(void *c_this,void *Object);
extern VS_CHAR *Star_SRPI_GetNameEx(void *c_this,void *Object);
extern void Star_SRPMF_Release(void *c_this);
extern VS_INT32 Star_SRPMF_GetNumber(void *c_this);
extern VS_BOOL Star_SRPMF_InsertFile(void *c_this, const VS_CHAR *FileName, VS_UINT8 *FileBuf, VS_ULONG FileBufSize, VS_UUID *FileID );
extern VS_BOOL Star_SRPMF_SetFromDisk(void *c_this, VS_CHAR *FileListInfo, const VS_CHAR *DiskFileName, VS_ULONG FileStartOffset );
extern VS_BOOL Star_SRPMF_SetFromMemory(void *c_this, VS_CHAR *FileListInfo, VS_UINT8 *FileMemory, VS_ULONG FileStartOffset );
extern VS_BOOL Star_SRPMF_IsExist(void *c_this, const VS_CHAR *FileName );
extern VS_ULONG Star_SRPMF_GetSize(void *c_this, const VS_CHAR *FileName  );
extern VS_ULONG Star_SRPMF_Read(void *c_this, const VS_CHAR *FileName, VS_UINT8 *ReadBuf  );
extern void Star_SRPMF_AddRef(void *c_this);
extern VS_INT32 Star_SRPMF_GetRef(void *c_this);
extern void Star_SRPMF_ReleaseOwner(void *c_this);
extern void Star_SRPFD_Release(void *c_this);
extern VS_BOOL Star_SRPFD_Open(void *c_this,VS_ULONG SectorNumberPerCluster,const VS_CHAR *FileName,VS_BOOL CreateFlag);
extern VS_ULONG Star_SRPFD_GetEmptySector(void *c_this);
extern void Star_SRPFD_ClearSectorList(void *c_this, VS_INT32 SectorNumber, VS_ULONG *SectorIndex );
extern void Star_SRPFD_FlushDirtySector(void *c_this);
extern VS_BOOL Star_SRPFD_IsSectorEmpty(void *c_this, VS_ULONG SectorIndex );
extern VS_BOOL Star_SRPFD_SetSectorInUse(void *c_this, VS_ULONG SectorIndex );
extern VS_ULONG Star_SRPFD_WriteSector(void *c_this,VS_ULONG SectorIndex,VS_UINT8 *DataHeader,VS_ULONG NextSector,VS_ULONG DataOffset,VS_ULONG DataSize,VS_INT8 *DataBuf);
extern VS_ULONG Star_SRPFD_ReadSector(void *c_this,VS_ULONG SectorIndex,VS_UINT8 *DataHeader,VS_ULONG *NextSector,VS_ULONG DataOffset,VS_ULONG DataSize,VS_INT8 *DataBuf);
extern VS_BOOL Star_SRPFD_ReadFileHeader(void *c_this,VS_UINT8 *Buf);
extern VS_BOOL Star_SRPFD_SaveFileHeader(void *c_this,VS_UINT8 *Buf);
extern VS_BOOL Star_SRPFD_GetNextSectorIndex(void *c_this, VS_ULONG SectorIndex,VS_UINT8 *DataHeader, VS_ULONG *NextSector );
extern VS_ULONG Star_SRPFD_GetSize(void *c_this,VS_ULONG *DiskSize);
extern void Star_SRPFD_Clear(void *c_this);
extern void Star_SRPFD_Close(void *c_this);
extern void Star_SRPFD_AddRef(void *c_this);
extern VS_INT32 Star_SRPFD_GetRef(void *c_this);
extern void Star_SRPFD_ReleaseOwner(void *c_this);
extern void Star_SRPCS_Release(void *c_this);
extern VS_INT8 *Star_SRPCS_AnsiToUnicode(void *c_this,VS_UINT32 CodePage,const VS_CHAR *ToCode,const VS_INT8 *AnsiStr,VS_INT32 StrLength);
extern VS_INT8 *Star_SRPCS_UnicodeToAnsi(void *c_this,const VS_CHAR *FromCode,VS_UINT32 CodePage,const VS_INT8 *WideStr,VS_INT32 StrLength,VS_INT32 BytesPerChar);
extern VS_INT8 *Star_SRPCS_AnsiToUTF8(void *c_this,const VS_INT8 *AnsiStr,VS_INT32 StrLength);
extern VS_INT8 *Star_SRPCS_UTF8ToAnsi(void *c_this,const VS_INT8 *UTFStr,VS_INT32 StrLength);
extern VS_INT8 *Star_SRPCS_ToOSPlatString(void *c_this,const VS_INT8 *Str,VS_INT32 StrLength);
extern VS_INT8 *Star_SRPCS_ToOSPlatStringEx(void *c_this,VS_UINT32 OSType,const VS_INT8 *Str,VS_INT32 StrLength);
extern void Star_SRPCS_FreeBuf(void *c_this,void *Buf);
extern void Star_SRPCS_vs_reg_beginlock(void *c_this);
extern void Star_SRPCS_vs_reg_endlock(void *c_this);
extern VS_ULONG Star_SRPCS_vs_reg_createkeyex(void *c_this,vs_reg_hkey hKey,const VS_CHAR *SubKey,const VS_CHAR *Class,vs_reg_hkey *RetKey,VS_ULONG *DisPosition);
extern VS_ULONG Star_SRPCS_vs_reg_closekey(void *c_this,vs_reg_hkey hKey);
extern VS_ULONG Star_SRPCS_vs_reg_setvalue(void *c_this,vs_reg_hkey hKey,const VS_CHAR *ValueName,VS_ULONG Type,const VS_CHAR *Value,VS_ULONG ValueSize);
extern VS_ULONG Star_SRPCS_vs_reg_openkeyex(void *c_this,vs_reg_hkey hKey,const VS_CHAR *SubKey,vs_reg_hkey *RetKey);
extern VS_ULONG Star_SRPCS_vs_reg_queryvalueex(void *c_this,vs_reg_hkey hKey,const VS_CHAR *ValueName,VS_ULONG *Type,VS_UINT8 *DataBuf,VS_ULONG *DataBufSize);
extern VS_ULONG Star_SRPCS_vs_reg_deletekeyex(void *c_this,vs_reg_hkey hKey,const VS_CHAR *SubKey);
extern VS_ULONG Star_SRPCS_vs_reg_enumkey(void *c_this,vs_reg_hkey hKey,VS_ULONG Index,VS_CHAR *NameBuf,VS_ULONG NameBufSize);
extern VS_INT32 Star_SRPCS_GetCharBytes(void *c_this,const VS_INT8 *Buf);
extern VS_INT8 *Star_SRPCS_ToAnsi(void *c_this,const VS_CHAR *Locale,const VS_INT8 *Str);
extern VS_INT8 *Star_SRPCS_FromAnsi(void *c_this,const VS_CHAR *Locale,const VS_INT8 *Str);
extern VS_INT8 *Star_SRPCS_vs_iconv(void *c_this,const VS_CHAR *FromLocale,const VS_CHAR *ToLocale,const VS_INT8 *InBuf,VS_INT32 InBufSize,VS_INT32 *RetBufSize);
extern VS_INT8 *Star_SRPCS_AnsiToUnicodeEx(void *c_this,VS_UINT32 CodePage,const VS_CHAR *ToCode,const VS_INT8 *AnsiStr,VS_INT32 StrLength,VS_INT32 *RetCharLength);
extern VS_INT8 *Star_SRPCS_UnicodeToAnsiEx(void *c_this,const VS_CHAR *FromCode,VS_UINT32 CodePage,const VS_INT8 *WideStr,VS_INT32 StrLength,VS_INT32 BytesPerChar,VS_INT32 *RetCharLength);
extern VS_INT8 *Star_SRPCS_AnsiToUTF8Ex(void *c_this,const VS_INT8 *AnsiStr,VS_INT32 StrLength,VS_INT32 *RetCharLength);
extern VS_INT8 *Star_SRPCS_UTF8ToAnsiEx(void *c_this,const VS_INT8 *UTFStr,VS_INT32 StrLength,VS_INT32 *RetCharLength);
extern void Star_SRPFP_Release(void *c_this);
extern void Star_SRPFP_Clear(void *c_this);
extern VS_INT32 Star_SRPFP_GetNumber(void *c_this);
extern VS_UINT8 Star_SRPFP_GetType(void *c_this,VS_INT32 Index);
extern VS_UWORD Star_SRPFP_GetValue(void *c_this,VS_INT32 Index);
extern VS_BOOL Star_SRPFP_SetValue(void *c_this,VS_INT32 Index,VS_UINT8 In_Type,VS_UWORD In_Para);
extern VS_BOOL Star_SRPFP_Call(void *c_this,void *Object,VS_UUID *FunctionID,VS_UWORD *RetValue,VS_UINT8 *RetType);
extern void *Star_SRPFP_Dup(void *c_this);
extern void Star_SRPFP_AddRef(void *c_this);
extern VS_INT32 Star_SRPFP_GetRef(void *c_this);
extern void Star_SRPFP_ReleaseOwner(void *c_this);
extern VS_FLOAT Star_SRPFP_GetFloatValue(void *c_this,VS_INT32 Index);
extern VS_DOUBLE Star_SRPFP_GetDoubleValue(void *c_this,VS_INT32 Index);
extern VS_INT64 Star_SRPFP_GetInt64Value(void *c_this,VS_INT32 Index);
extern VS_BOOL Star_SRPFP_SetFloatValue(void *c_this,VS_INT32 Index,VS_FLOAT In_Para);
extern VS_BOOL Star_SRPFP_SetDoubleValue(void *c_this,VS_INT32 Index,VS_DOUBLE In_Para);
extern VS_BOOL Star_SRPFP_SetInt64Value(void *c_this,VS_INT32 Index,VS_INT64 In_Para);
extern VS_BOOL Star_SRPFP_CallEx(void *c_this,void *Object,VS_UUID *FunctionID,VS_UWORD *RetValue,VS_DOUBLE *RetDouble,VS_INT64 *RetInt64,VS_UINT8 *RetType);
extern VS_BOOL Star_SRPFP_SetValueFromLua(void *c_this,VS_INT32 Index,VS_INT32 LuaIndex);
extern void Star_SRPLock_Release(void *c_this);
extern void Star_SRPLock_Lock(void *c_this);
extern void Star_SRPLock_UnLock(void *c_this);
extern void Star_StarCore_Release(void *c_this);
extern VS_INT32 Star_StarCore_GetInitResult(void *c_this);
extern void Star_StarCore_SetWnd(void *c_this,VS_HWND In_hWnd);
extern void Star_StarCore_SetWndActive( void *c_this,VS_BOOL In_ActiveFlag );
extern void *Star_StarCore_CreateService(void *c_this,const VS_CHAR *ServiceName,VSImportServiceDef *ImportService);
extern void *Star_StarCore_CreateService1(void *c_this,const VS_CHAR *ServicePath,const VS_CHAR *ServiceName,VS_UUID *ServiceID,const VS_CHAR *RootPass,VSImportServiceDef *ImportService);
extern void *Star_StarCore_CreateService2(void *c_this,const VS_CHAR *ServicePath,const VS_CHAR *ServiceName,VS_UUID *ServiceID,const VS_CHAR *RootPass,VS_INT32 FrameInterval,VS_INT32 NetPkgSize,VS_INT32 UploadPkgSize,VS_INT32 DownloadPkgSize,VS_INT32 DataUpPkgSize,VS_INT32 DataDownPkgSize,VSImportServiceDef *ImportService);
extern void Star_StarCore_Flush(void *c_this,VS_BOOL WaitFlag);
extern void Star_StarCore_MsgLoop(void *c_this,VS_SRPMsgLoopExitProc SRPMsgLoopExitProc);
extern void *Star_StarCore_GetControlInterface(void *c_this);
extern void *Star_StarCore_GetBasicInterface(void *c_this);
extern void Star_SRPMM_memset(void *Buf,VS_INT8 c,VS_INT32 Len);
extern void Star_SRPMM_memcpy(void *DesBuf,const void *SrcBuf,VS_INT32 Len);
extern VS_INT32 Star_SRPMM_strlen(VS_INT8 *Buf);

#endif

